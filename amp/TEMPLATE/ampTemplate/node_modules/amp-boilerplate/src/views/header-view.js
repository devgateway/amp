var fs = require('fs');
var Backbone = require('backbone');
require('bootstrap/dist/js/bootstrap');
var _ = require('underscore');
var Template = fs.readFileSync(__dirname + '/../templates/header-template.html', 'utf8');
var MenuCollection = require('../collections/amp-menus-collection.js');
var MenuModel = require('../models/amp-menus-model.js');
var SubmenuView = require('./submenu-compositeview.js');
var AboutView = require('./about-view.js');
var UserProfileView = require('./user-profile-view.js');
var Settings = require('../models/settings');
var Languages = require('../collections/language-collection');

module.exports = Backbone.View.extend({
  el: '#amp-header',
  appendEl: '#AmpMenus',
  template: _.template(Template),
  menuRendered: new $.Deferred(),  
  events: {
    'click #show_login_pop': 'openLoginBox',
    'click .user-url' : 'showUserProfile'
  },

  initialize: function(options) {
    this.collection = new MenuCollection();
    this.translator = options.translator;
    this.showLogin = options.showLogin;
    this.useSingleRowHeader = options.useSingleRowHeader;
    this.loginDropdown = !!options.loginDropdown;
    this.model = options.model;
    this.settings = new Settings();
    this.languages = new Languages();
    var self = this;     
    $.when.apply($, [this.settings.fetch(), this.collection.fetch(), this.languages.fetch()]).then(function () {
    	self.render();
    });
    
    this.firstRender = true;
    this.about = new AboutView(options);
    this.userProfile = new UserProfileView(options);
    _.bindAll(this, 'addOne', 'addAll', 'showAbout', 'showUserProfile');

  },

  addAll: function() {
    this.collection.each(this.addOne);
    this.menuRendered.resolve();
  },

  addOne: function(model) {
    view = new SubmenuView({
      model: model
    });
    this.listenTo(view, 'showAbout', this.showAbout);
    var self = this;
    this.listenTo(view, 'switchLanguage', function(lng) {
      self.translator.setLanguage(lng.language).always(function(data, textStatus, jqXHR) {
    	  if (textStatus !== "error") {
    		  location.reload();
    	  } else {
    		  // AMP-21714: For some unknown reason there are 2 async calls to the endpoint and FF sometimes takes the error from the 1st call.
        	  self.translator.setLanguage(lng.language).always(function(data, textStatus, jqXHR) {
    			  location.reload();
    		  });
    	  }
      });
    });
    view.render();
    $(this.appendEl).append(view.el);
  },

  render: function() {
    var self = this;
    var currentLanguage = this.languages.findWhere({"id": this.settings.get('language')});
    if (this.firstRender) {
      this.$el.html(this.template({
        showLogin: self.showLogin,
        loginDropdown: self.loginDropdown,
        useSingleRowHeader: self.useSingleRowHeader,
        properties: this.model,
        currentLanguage: currentLanguage
      }));
      this.addAll();
      this.firstRender = false;
      //Ashamed still, I'm forced to this, because the form comes from `loginWidget3.js` and I'm too afraid to touch it
      $('#show_login_pop_box').insertBefore('#show_login_pop');
      $('#logincontainer').insertAfter('#show_login_pop');
    }

    return this;
  },

  showAbout: function() {
    if ($('#about-popup').length == 0) {
      this.$el.parent().append(this.about.render().el);
    }
    if (typeof $().modal !== 'function') {
      $.noConflict();
    }
    $('#about-popup').modal({
      show: true,
      backdrop: false
    });
    this.translator.translateDOM($('#about-popup')[0]);
    return false;
  },

  openLoginBox: function() {
    $("div#show_login_pop_box").show();
    $("#j_username").focus();
  },
  
  showUserProfile: function(){
	  if ($('#user-profile').length == 0) {
	      this.$el.parent().append(this.userProfile.render().el);
	  }
	  this.userProfile.showUserProfile();
}
});
