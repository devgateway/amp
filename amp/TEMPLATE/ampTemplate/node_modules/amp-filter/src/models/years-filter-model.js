var $ = require('jquery');
var _ = require('underscore');
var BaseFilterModel = require('../models/base-filter-model');


module.exports = BaseFilterModel.extend({


  defaults: {
    selectedStart: null,
    selectedEnd: null,
    // range is provided by api, but will fallback to this if not provided, or set to -1
    startYear: '',
    endYear: '',
    modelType: 'DATE-RANGE-VALUES'
  },
  
  sync: function () {
	  /**
	   * hackish: the data coming off the /dates endpoint should be ignored at all moments, because
	   * 1. for tabs/saiku, it should always be empty
	   * 2. for gis/dashboards, it is coming off the /setting endpoint
	   * 
	   * All the other years-filter-model should by spec be always empty at this point. In case this would cease to be true in the future,
	   * just filter by "name"
	   */ 
	  	
	  //console.error('SYNCING YEARS MODEL: ' + this.get('name'));
	  return $.when(true);
  },

  initialize: function(options) {
    BaseFilterModel.prototype.initialize.apply(this, [options]);
    this.url = options.endpoint;
    this.set('_loaded', $.Deferred());
  },

  parse: function(data) {
	  console.log('years-filter-model.parse: data = ' + JSON.stringify(data));
    if (!data.startYear || data.startYear === -1) {
      data.startYear = this.defaults.startYear;
    } else {
      data.startYear = data.startYear + '-01-01';
    }
    if (!data.endYear || data.endYear === -1) {
      data.endYear = this.defaults.endYear;
    } else {
      data.endYear = data.endYear + '-12-31';
    }

    if (!data.selectedStart) {
    	// good ole' partial copy-paste off postprocess()
    	data.selectedStart = data.startYear;
    	data.selectedEnd = data.endYear;
    }
    this.get('_loaded').resolve();
    return data;
  },

  serialize: function(options) {
	// AMP-21041: Enabled filtering by start OR end date.
    if (this.get('selectedStart') || this.get('selectedEnd')) {
    	  var key = _.first(this.get('columns')) !='N/A' ? _.first(this.get('columns')): 'date';    	   	  
    	  var obj = {};
    	  if(options.wholeModel === true){
    		  obj[key] = {			
    				  modelType : this.get('modelType'),    		  
    				  start: this.get('selectedStart'),
    				  end: this.get('selectedEnd')			  
    			 };
    	  } else {
    		  obj[key] = {				  
    				  start: this.get('selectedStart'),
    				  end: this.get('selectedEnd')			  
    			 }; 
    	  }
    	  return obj;
    } else {
      return null;
    }
  },

  /**
   * postprocess model after having fetched data from the server
   */
  postprocess: function() {
	  // only set if not set by deserialize
	  if (!this.get('selectedStart')) {
	  	  this.set('selectedStart', this.get('startYear'));
	  }
	  // AMP-21041: Enabled filtering by start OR end date.
      if (!this.get('selectedEnd')) {                  
          this.set('selectedEnd', this.get('endYear'));
      }
  },
  
  deserialize: function(obj) {
	var key = _.first(this.get('columns')) !='N/A' ? _.first(this.get('columns')) : 'date';
	if (obj && obj[key]) {
	  this.set('selectedStart', this._dateConvert(obj[key].start));
	  this.set('selectedEnd', this._dateConvert(obj[key].end));
      this.postprocess();
	}else{
		this.set('selectedStart', this.get('startYear'));
	    this.set('selectedEnd', this.get('endYear'));
	}
  },

  reset: function() {
    this.set('selectedStart', this.get('startYear'));
    this.set('selectedEnd', this.get('endYear'));
  },

  // converts: 03/01/1961 ==> 1961-01-01 IF NEEDED.
  // DOES NOT CONVERT from the "-" format to "/" format anymore
  // 
  // amp expects with '-' and jQuery wants with '/'
  _dateConvert: function(input){
	  console.log('asked to convert input: ' + input);
    var output = null;
    if (input) {
      if (input.indexOf('/')>-1){
        input = input.split('/');
        output = input[2] + '-' + input[1] + '-' + input[0];
      } else {
    	  output = input;
      }
      /* else if(input.indexOf('-')>-1){
      }
        input = input.split('-');
        output = input[2] + '/' + input[1] + '/' + input[0];
      }*/
    }
    return output;
  }

});
