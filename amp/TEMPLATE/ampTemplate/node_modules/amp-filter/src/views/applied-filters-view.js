var Backbone = require('backbone');
var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Translator = require('amp-translate');
var Template = fs.readFileSync(__dirname + '/../templates/applied-filters-view.html', 'utf8');
var AllFilterCollection = require('../collections/all-filters-collection');

// https://www.w3schools.com/howto/howto_js_treeview.asp
module.exports = Backbone.View.extend({

  /**
   * Possible options:
   * 1) plainOutput: This is the old format with each level in a different container (default=false).
   * 2) treeOutput: New tree format similar to the widget itself (default=true).
   * 3) alwaysExpanded: Show the tree expanded (default=false).
   * 4) containerId: Where to insert the applied filters, can be an id ('#someElement') or class ('.someClass').
   * @param options
   */
  initialize: function (options) {
    var _options = options || {};
    this.template = _.template(Template);
  },

  createItemObject: function (id, code, name, filterId, children) {
    return {
      id: id,
      code: code,
      name: name,
      filterId: filterId,
      children: children
    };
  },

  isNodeSelected: function (node) {
    var ret = (node.get('numSelected') === node.get('numPossible') && node.get('numSelected') > 0)
      || (node.get('numSelected') === 0 && node.get('selected'));
    return ret;
  },

  getAppliedFilters: function (options) {
    var self = this;
    this.container = $(options.containerId);
    var serializedFilters = { filters: [] };
    this.allFilters.each(function (filter) {
      switch (filter.get('modelType')) {
        case 'TREE':
          if (filter.get('numSelected') > 0) {
            self.getAppliedFiltersTree(serializedFilters, filter);
          }
          break;
        case 'DATE-RANGE-VALUES':
          self.getAppliedFiltersDateRange(serializedFilters, filter);
          break;
        case 'YEAR-SINGLE-VALUE':
          self.getAppliedFiltersDateYear(serializedFilters, filter);
          break;
      }
    });
    console.info(serializedFilters);

    var AppliedFilterModel = Backbone.Model.extend();
    model = new AppliedFilterModel();
    model.set({serializedFilters: serializedFilters});
    this.model = model;

    this.render();
  },

  getAppliedFiltersDateRange: function (serializedFilters, filter) {
    var self = this;
    var add = false;
    var rootFilter = {
      id: filter.get('id'),
      displayName: filter.get('displayName') || filter.get('name'),
      originalName: filter.get('originalName'),
      modelType: filter.get('modelType')
    };
    if (filter.get('selectedStart')) {
      add = true;
      rootFilter.selectedStart = filter.get('selectedStart');
    }
    if (filter.get('selectedEnd')) {
      add = true;
      rootFilter.selectedEnd = filter.get('selectedEnd');
    }
    if (add) {
      serializedFilters.filters.push(rootFilter);
    }
  },

  getAppliedFiltersDateYear: function (serializedFilters, filter) {
    var self = this;
    if (filter.get('selectedYear')) {
      serializedFilters.filters.push({
        id: filter.get('id'),
        displayName: filter.get('displayName') || filter.get('name'),
        originalName: filter.get('originalName'),
        modelType: filter.get('modelType'),
        selectedYear: filter.get('selectedYear')
      });
    }
  },

  getAppliedFiltersTree: function (serializedFilters, filter) {
    var self = this;
    if (self.isNodeSelected(filter)) {
      // AMP-28806: Dont add filter if all selected.
    } else {
      var tree = filter.get('tree');
      var children = tree ? tree.get('children') : null;
      var rootFilter = {
        id: filter.get('id'),
        displayName: filter.get('displayName') || filter.get('name'),
        originalName: filter.get('originalName'),
        modelType: filter.get('modelType'),
        filterId: filter.get('filterId'),
        children: []
      };
      if (children) {
        var root = self.createItemObject(filter.get('id'), filter.get('code'), filter.get('name'), filter.get('filterId'), [])
        children.each(function (child) {
          self.exploreTree(child, root);
        });
        if (root.children.length > 0) {
          rootFilter.children.push(root);
        }
      }
    }
    if (rootFilter.children.length > 0) {
      serializedFilters.filters.push(rootFilter.children[0]);
    }
  },

  exploreTree: function(child, _filter) {
    var self = this;
    if (self.isNodeSelected(child)) {
      var node = self.createItemObject(child.get('id'), child.get('code'), child.get('name'), child.get('filterId'), []);
      _filter.children.push(node);
    } else if (child.get('numSelected') > 0) {
      var node = self.createItemObject(child.get('id'), child.get('code'), child.get('name'), child.get('filterId'), []);
      if (_filter.id !== node.id) {
        _filter.children.push(node);
      }
      child.get('children')
        .each(function (child_) {
          self.exploreTree(child_, node);
        });
    }
  },

  render: function () {
    var self = this;
    this.$el = this.container;
    this.$el.html(this.template(_.extend({}, this.model.toJSON())));
    this.$el.show();
    return this;
  }
});
