/**
 * this is the view which renders the big Filter contents (the tabs)
 */
var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');

var Translator = require('amp-translate');

var TopLevelFilterView = require('../views/top-level-filter-view');
var AllFilterCollection = require('../collections/all-filters-collection');


var Template = fs.readFileSync(__dirname + '/../templates/filters-content-template.html', 'utf8');
var TitleTemplate = fs.readFileSync(__dirname + '/../templates/filter-title-template.html', 'utf8');
var filtersViewLog = require("../../../../../reamp/tools/log")('amp:filters:top-level:view');

var SettingsCollection = require('../collections/settings-collection');

var DateUtils = require('../utils/date-utils');

var filterInstancesNames = {donors: 'Funding Organizations', sectors : 'Sectors', programs: 'Programs', 
	  activity: 'Activity', allAgencies: 'All Agencies', financials: 'Financial',
		  locations: 'Location', others: 'Other'};


module.exports = Backbone.View.extend({
  id: 'tool-filters',
  name: 'Filters',
  apiURL: '/rest/filters',

  events: {
    'click .apply': 'applyFilters',
    'click .cancel': 'cancel',
    'click .reset': 'resetFilters'
  },

  // collection of top-level-filter views..
  filterViewsInstances:{},

  template: _.template(Template),
  titleTemplate: _.template(TitleTemplate),
  PARAMS_DATE_FORMAT:'yy-mm-dd', //backend expects filters to be submitted in this format
  initialize:function(options) {
    var self = this;
    this.draggable = options.draggable;
    this.caller = options.caller;
    this.settings = new SettingsCollection();
    this.settings.fetch();
    
    this.dateFormatMappings = [];
    this.dateFormatMappings.push({ampformat: 'dd/MMM/yyyy', datepickerformat:'dd/M/yy'});
    this.dateFormatMappings.push({ampformat: 'MMM/dd/yyyy', datepickerformat:'M/dd/yy'});
    this.dateFormatMappings.push({ampformat: 'dd/MM/yyyy', datepickerformat:'dd/mm/yy'});
    this.dateFormatMappings.push({ampformat: 'MM/dd/yyyy', datepickerformat:'mm/dd/yy'});
    
    if(options.translator === undefined) {
      this.createTranslator();
    } else {
      this.translator = options.translator;
    }

    this.firstRender = true;
    this._createTopLevelFilterViews();
    this.allFilters = new AllFilterCollection([],options);
    this._loaded =  this.allFilters._loaded;
    this._getFilterList().then(function() {    	
        self.allFilters.each(function(model) {        	
      	  if(model.get('empty')){      		     		  
      		for (key in filterInstancesNames) {
    			if (filterInstancesNames.hasOwnProperty(key)) {
    				if(filterInstancesNames[key] == model.get('group')){
    					// remove tab if there is no data for the tab
    					delete filterInstancesNames[key];
    					delete self.filterViewsInstances[key];
    				}    				
    				
    			}
    		}      		
      	  }else{
      		self._createFilterViews(model);  
      	  }
      	  
      });        
   
      return this;
    });

  },

  
//  
//  _generateFilterViewInstance : function(keyname) {
//	  return new TopLevelFilterView({name:filterInstancesNames[keyname], translator: this.translator, translate: this.translate});
//  },	  					  
	  					
  
  _createTopLevelFilterViews: function() {
    //this.filterViewsInstances = {
    		for (key in filterInstancesNames) {
    			if (filterInstancesNames.hasOwnProperty(key)) {
    				
    				this.filterViewsInstances[key] = new TopLevelFilterView({name:filterInstancesNames[key], translator: this.translator, translate: this.translate, filterView: this});
    			}
    		}
    		/*
      donors: new TopLevelFilterView({name:'Funding Organizations', translator: this.translator, translate: this.translate}),
      sectors: new TopLevelFilterView({name:'Sector', translator: this.translator, translate: this.translate}),
      programs: new TopLevelFilterView({name:'Programs', translator: this.translator, translate: this.translate}),
      activity: new TopLevelFilterView({name:'Activity', translator: this.translator, translate: this.translate}),
      allAgencies: new TopLevelFilterView({name:'All Agencies', translator: this.translator, translate: this.translate}),
      financials: new TopLevelFilterView({name:'Financial', translator: this.translator, translate: this.translate}),
      locations: new TopLevelFilterView({name:'Location', translator: this.translator, translate: this.translate}),
      others: new TopLevelFilterView({name:'Other', translator: this.translator, translate: this.translate})
    };*/
  },


  render: function() {
    var self = this;
    this.$el.addClass('panel panel-primary');
    if (this.draggable) {
      this.$el.draggable({cursor: 'move', containment: 'window' });
    }
    this.firstRender = true;

    if (this.firstRender) {
      this.$el.html(this.template({}));
      this.$el.show();

      this._getFilterList().done(function() {
//    	self.cleanupUnusedTabs(); 
        self.renderFilters();
        self.translate(this.$el);
      });
      //debugger; // AMP-20617  wth does thing not work in saiku?
      // handle click on a Tab's title: http://getbootstrap.com/javascript/#tabs-events
      $(document).on('shown.bs.tab click', "ul.nav.filter-titles>li>a[data-toggle='tab']", function (e) {  // <- this line makes little sense but works in Saiku/Tabs also
        //this.$el.find("ul.nav.filter-titles>li>a[data-toggle='tab']").on('shown.bs.tab', function (e) {   // <- this line works in anything except Saiku/Tabs
        /**
         * the 'click' event added because (weirdly) the shown.bs.tab event not being fired AT ALL under Saiku/Tabs. Until this is investigated
         * on GIS/Dashboard tabs this second event is superfluous
         */

        //e.target // newly activated tab
        //e.relatedTarget // previous active tab

        var activeTab = $(e.target.parentElement).index(); // shameful hack, but haven't been able to find a cleaner solution
        var oldTabNr = e.relatedTarget ? $(e.relatedTarget.parentElement).index() : -1;
        filtersViewLog.log('switching from filters tab', oldTabNr, 'to tab', activeTab);
        $(e.target).closest('ul.filter-titles').attr('active-tab-number', activeTab); // not used in the current implementation of the code

        // render the first item of the tab
        var tabId = $(e.target).attr('href');
        var tabFirstChild = $(tabId).find('ul.sub-filters-titles>li:first a');
        if (tabFirstChild)
          tabFirstChild.click();
      });

      this.firstRender = false;
    } else {
      self.translate();
    }

    return this;
  },

  createTranslator: function(force) {
    var self = this;
    var filterTranslateKeys = JSON.parse(fs.readFileSync(__dirname + '/../lib/initial-translation-request.json', 'utf8'));
    // setup any popovers as needed...
    self.popovers = self.$('[data-toggle="popover"]');
    self.popovers.popover();
    if (force === true || self.translator === undefined) {
      filtersViewLog.onDebug(function() {
        filtersViewLog.log('Creating translator for filters because', force === true ? 'I was forced' : 'there is no translator');
      });
      self.translator = new Translator({defaultKeys: filterTranslateKeys});
    }
  },

  translate: function(target) {
    var element = this;
    if (target !== undefined) {
      element = target;
    }
    if (element.el !== undefined) {
      this.translator.translateDOM(element.el);
    } else {
      this.translator.translateDOM(element);
    }
  },

  /**
   * renders the tabs within the filters, only rendering the first item of the active tab (the others don't have their first item's contents rendered for performance reasons)
   */
  renderFilters: function() {
    this.$('.filter-options').html('');

    var renderingTitleNumber = -1;
    var activeTitleNumber = this.$('.filter-titles').attr('active-tab-number') || 0;

    for (var filterView in this.filterViewsInstances) {
//    	console.log(filterView);
      if (this.filterViewsInstances.hasOwnProperty(filterView)) {
    	  contained = false;
    	  var index;
    	  for (index = 0; index < this.allFilters.length; index++) {
    		  if ((this.allFilters.models[index].attributes.tab === this.filterViewsInstances[filterView].name) || 
    		  (this.allFilters.models[index].attributes.group === this.filterViewsInstances[filterView].name)){
    			  contained = true;
    			  break;
    		  } 
    	  }
    	  if (!contained) {
    		  delete this.filterViewsInstances[filterView];
    		  continue;
    	  }
    		  
        var tmpFilterView = this.filterViewsInstances[filterView];
        renderingTitleNumber = renderingTitleNumber + 1;
        // console.log('rendering top-level-filter-view ' + tmpFilterView.name); CONSTANTIN - comment to be removed once filters sanitisation is done
        this.$('.filter-titles').append(tmpFilterView.renderTitle().titleEl);
        var active = renderingTitleNumber == activeTitleNumber;
        this.$('.filter-options').append(tmpFilterView.renderFilters(active).el);
      }
    }

    // Opens the first tab in the filter
    this.$('.filter-titles a:first').tab('show');
  },


  _getFilterList: function() {
    return this.allFilters.load();
  },

  _createFilterViews: function(tmpModel) {
    // TODO: magic strings are dangerous, config somewhere...
    switch (tmpModel.get('group')) {
      case 'ActivityBudgetList':
      case 'TypeOfAssistanceList':
      case 'ModeOfPaymentList':
      case 'ExpenditureClassList':
      case 'FinancingInstrumentsList':
      case 'FundingStatus':
      case 'effectiveFundingDate':
      case 'fundingClosingDate':
        this.filterViewsInstances.financials.filterCollection.add(tmpModel);
        break;
      case 'ActivityStatusList':
      case 'ActivityApprovalStatus':
        this.filterViewsInstances.activity.filterCollection.add(tmpModel);
        break;
      case 'Programs':
        this.filterViewsInstances.programs.filterCollection.add(tmpModel);
        break;
      case 'Sectors':
        this.filterViewsInstances.sectors.filterCollection.add(tmpModel);
        break;
      case 'Donor':
        this.filterViewsInstances.donors.filterCollection.add(tmpModel);
        break;
      case 'Role':
        this.filterViewsInstances.allAgencies.filterCollection.add(tmpModel);
        break;
      case 'LocationList':
        this.filterViewsInstances.locations.filterCollection.add(tmpModel);
        break;
      default:
        this.filterViewsInstances.others.filterCollection.add(tmpModel);
    }

  },
  
  serializeToModels: function(filter) {
	  var _self = this;
	  _self.values = {0: [], 1: [], 2: [], 3: []}; //TODO: Implement calculateFilterDept() function.
	  if (filter.get('tree')) {
		  var entryPoint = filter.get('tree').get('children');
		  var currentLevel = 0;
		  if (filter.get('numSelected') !== filter.get('numPossible')) {
			  _.each(entryPoint.models, function(item) {
				  _self.serializeLevel(item, 0, _self.values);
			  });
		  }
	  } else {
		  _self.values = filter;
	  }
	  return _self.values;
  },
    
  serializeLevel: function(node, level, values) {
	// When we enter here it means the parent is not 'fully selected'.
	  var _self = this;
	  if (node.get('children').models.length > 0) {
		  // "Double check" because some selected middle nodes have get('selected') === false. 
		  if (node.get('numSelected') !== node.get('numPossible') && node.get('selected') === false) {
			  _.each(node.get('children').models, function(node2) {				  
				  _self.serializeLevel(node2, level + 1, values);
			  });
		  } else {
			  if (values[level] === undefined) {
				  values << [];
			  }
			  values[level].push({'level': level, 'levelName': node.get('filterId'), name: node.get('name')});
		  }
	  } else { // We reached the last level..
		  if (node.get('selected') === true) {
			  if (values[level] === undefined) {
				  values << [];
			  }
			  values[level].push({'level': level, 'levelName': node.get('filterId'), name: node.get('name')});
		  }
	  }	  
  },
  
  //TODO: move from view to all-collection
  serialize: function(options) {
    var self = this;
    var serializedFilters = {'columnFilters':{}, 'otherFilters':{} };

    this.allFilters.each(function(filter) {
      // TODO: build a util for bettermerge that concat's array if
      // duplicate keys in objects...
      if (filter.get('id') || filter.url) {
        if (filter.get('modelType') === 'DATE-RANGE-VALUES') {
          _.extend(serializedFilters.otherFilters, filter.serialize(options));
        } else if (filter.get('modelType') === 'YEAR-SINGLE-VALUE') {
            _.extend(serializedFilters.otherFilters, filter.serialize(options));
        } else {
          var serialized = filter.serialize(options);
          if (options.wholeModel === true) {
            var keys = [];
            for(var k in serialized) keys.push(k);
            if (keys[0] !== undefined && serialized[keys[0]] !== undefined) {
              serialized[keys[0]].filterName = (filter.get('displayName') || filter.get('name'));
              serialized[keys[0]].serializedToModels = self.serializeToModels(filter);
            }
          }
          _.extend(serializedFilters.columnFilters, serialized);
        }
      }
    });

    //remove empty / false values.
    _.each(serializedFilters, function(v, k) {
      if(!v || _.isEmpty(v)) {
        delete serializedFilters[k];
      }
    });

    return serializedFilters;
  },
 deserialize: function(blob, options) {
    if (blob) {
      if(_.isUndefined(this.initialFilters)){
    	  this.initialFilters = blob;
      }     
      var that = this;
      that.allFilters.each(function(filter) {
        if (filter.get('id') || filter.url) {
          if(filter.get('modelType') === 'DATE-RANGE-VALUES') {
            if (_.isEmpty(blob.otherFilters)){ 
            	that.setDefaultDates(blob);
            }            
            filter.deserialize(blob.otherFilters);
          } else if (filter.get('modelType') === 'YEAR-SINGLE-VALUE') {
        	  filter.deserialize(blob.otherFilters);  
          } else{
            filter.deserialize(blob.columnFilters);
          }
        }
      });
    } else {
      console.warn('could not deserialize blob:', blob);
    }
    if (!options || !options.silent) {
      this.applyFilters();  // triggers the "apply" event
    }
  },

  showFilters: function() {
    this.render();
    this.filterStash = null;  // in case they haven't loaded yet, don't try to .serialize()
    this._loaded.done(_.bind(function() { this.filterStash = this.serialize({}); }, this));
  },

  setStash: function() {
    this.filterStash = null;  // in case they haven't loaded yet, don't try to .serialize()
    this._loaded.done(_.bind(function() { this.filterStash = this.serialize({}); }, this));
  },

  resetFilters: function() {
	var self = this;
	 var blob = !_.isUndefined(this.initialFilters) ? JSON.parse(JSON.stringify(this.initialFilters)) : {};//clone initial filters
    this.allFilters.each(function(filter) {
    if (filter.get('modelType') === 'DATE-RANGE-VALUES') {
    	 if (_.isEmpty(blob.otherFilters)){ 
    		 self.setDefaultDates(blob);
         }   	 
    	 filter.deserialize(blob.otherFilters);
     }else{
    	 filter.reset();
     }      
    });
  },

  applyFilters: function() {
    this._loaded.done(_.bind(function() {
      var state = this.serialize({});
      this.trigger('apply', state);
    }, this));
  },

  getDateFormat: function(){
	  if(this.dFormat){
		  return this.dFormat;
	  }	
	  
	  var dateFormatSetting = this.settings.findWhere({ id: 'default-date-format' });
	  if(dateFormatSetting && dateFormatSetting.get("options") && dateFormatSetting.get("options").length > 0){			
			var foundMapping =_.findWhere(this.dateFormatMappings, {ampformat: dateFormatSetting.get("options")[0].name});
			if(foundMapping){
				this.dFormat = foundMapping.datepickerformat;
			}
	  }	  
	  if(!this.dFormat){
		  this.dFormat = this.PARAMS_DATE_FORMAT;
	  }	  
	  return this.dFormat;
   },
  
   formatDate: function(date){
	   return $.datepicker.formatDate(this.getDateFormat(), ($.datepicker.parseDate(this.PARAMS_DATE_FORMAT,date)));
   }, 
   setDefaultDates: function(blob){
	 var self = this;
  	 if(self.caller === "DASHBOARD"){
  		 return DateUtils.extractDates(self.settings.models, blob, 'dashboard-default-min-date', 'dashboard-default-max-date'); 	 
  	 }else if(self.caller === "GIS"){
  		return DateUtils.extractDates(self.settings.models, blob, 'gis-default-min-date', 'gis-default-max-date');
  	 }
  	 return blob
   },
  cancel: function() {
    if(this.filterStash){
      this.deserialize(this.filterStash, {silent: true});
    }
    this.trigger('cancel', this.filterStash);
  }
});

