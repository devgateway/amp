var runSequence = require('run-sequence');
var browserify = require('browserify');
var source = require('vinyl-source-stream');
var gulp = require('gulp');
var del = require('del');
var $ = require('gulp-load-plugins')();


var paths = {
  root: './src',
  ampRoot: '../../../../',
  rootStuff: './src/*.{html,txt,xml}',
  dist: './dist/',
  scripts: {
    entry: './src/index.js',
    compiled: './src/compiled-js/',
    sources: [
      './src/models/*.js',
      './src/views/*.js',
      './src/collections/*.js',
      './gulpfile.js'
    ]
},
 stylesheets: {
    entry: './src/less/amp-settings.less',
    compiled: './src/compiled-css/',
    sources: ['./src/less/**/*.less'],
    testStyles: './bower_components/mocha/mocha.css'
  },
};

function _browserifier(entry, destFolder, destName, options) {
  var bundler = browserify(entry, options);
  bundler.transform('brfs');
  var bundle = function() {
    $.util.log('bundle: start');
    return bundler.bundle()
      .on('end', function() { $.util.log('bundle: finished'); })
      .on('error', function(e) { $.util.log('bundle: error: ', e); })
      .pipe(source(destName))
      .pipe(gulp.dest(destFolder));
  };

  return {
    bundler: bundler,
    bundle: bundle
  };
}


gulp.task('lint', function() {
  gulp.src(paths.scripts.sources)
    .pipe($.plumber())
    .pipe($.jscs())
    .pipe($.jshint())
    .pipe($.jshint.reporter('jshint-stylish'));
});


gulp.task('browserify', function() {
  var stuff = _browserifier(paths.scripts.entry,
    paths.scripts.compiled, 'amp-settings.js',{debug: true, standalone: 'amp-settings'});
  return stuff.bundle();
});


gulp.task('clean', function() {
  return del(paths.dist, { force: true });
});


gulp.task('build-js', ['browserify'], function() {
  return gulp.src(paths.scripts.compiled + 'amp-settings.js')
    //.pipe($.streamify($.uglify))
    .pipe(gulp.dest(paths.dist));
});

gulp.task('build-css', ['less'], function() {
	  return gulp.src(paths.stylesheets.compiled + 'amp-settings.css')
	    .pipe($.csso())
	    .pipe(gulp.dest(paths.dist));
	});

gulp.task('less', function() {
	  return gulp.src(paths.stylesheets.entry)
	    .pipe($.plumber())
	    .pipe($.sourcemaps.init())
	      .pipe($.less())
	        .on('error', $.util.log)
	        .on('error', $.util.beep)
	    .pipe($.sourcemaps.write())
	    .pipe($.sourcemaps.init({ loadMaps: true }))
	    .pipe($.concat('amp-settings.css'))
	    .pipe($.sourcemaps.write())
	    .pipe(gulp.dest(paths.stylesheets.compiled));
	});

gulp.task('build-rootstuff', function() {
  return gulp.src(paths.rootStuff)
    .pipe(gulp.dest(paths.dist));
});

gulp.task('build', function(cb) {
  runSequence(
    'clean','build-js', ['build-css','build-rootstuff'],
    cb
  );
});
