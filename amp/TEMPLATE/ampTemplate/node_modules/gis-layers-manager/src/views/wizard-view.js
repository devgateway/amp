var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var ColorCollection = require('../collections/colors-collection.js');
var ADMCollection = require('../collections/adm-levels-collection.js');
var AccessTypesCollection = require('../collections/access-types-collection.js');
var IndicatorTypesCollection = require('../collections/indicator-types-collection.js');
var Steps = require('../utils/steps.js');
var Validator = require('../utils/validator.js');
var Events = require('../utils/events.js');
var Template = fs.readFileSync(__dirname + '/../templates/wizard-template.html', 'utf8');
var IndicatorLayer = require('../models/indicator-layer.js');
var UserModel = require('../models/user-model.js');
var TranslationUtils = require('../utils/translation-util.js');
var LocalStorageService = require('../utils/local-storage-service.js');
var MessageUtils = require('../utils/message-util');
var ErrorCodes = require('../utils/indicator-errors');
var Constants = require('../utils/constants');
module.exports = Backbone.View.extend({
  id: 'layer-manager-wizard',  
  events: {	
	  'click .next-button ': 'next',
	  'click .previous-button': 'previous',	  
	  'click .btn-back': 'backToList',
	  'click .export-button': 'exportFile',	 
	  'click .import-button': 'importFile',		  
	  'change .simple-input':  'onInputChange',
	  'change .multi-lang-input':  'onMultiLangInputChange',
	  'click .color-radio': 'selectColors',
	  'click .btn-submit' : 'submitLayer',
	  'change .indicator-file': 'onImportFileChange',
	  'click .tab': 'openTab',
	  'change .zero-category-enabled': 'onZeroCategoryChange'
  },  
  template: _.template(Template),  
  numericFields:['indicatorTypeId'],
  initialize:function(options) {	 
	  _.bindAll(this, 'render', 'next','previous','onInputChange','loadCollections','submitLayer','backToList','exportFile','onImportFileChange','onImportFailed','onImportSuccesful');
	  this.EventsBus = options.EventsBus;
	  this.translate = options.translate;
	  this.translator = options.translator;
	  this.settings = options.settings;
	  this.languages = [];
	  var self = this;
	  if(!_.isUndefined(options.model)){
		  self.model = options.model;		  
		  if(!self.model.isNew()){
			  self.clone =  JSON.parse(JSON.stringify(self.model.toJSON()));
		  }
	  }	
  },  
  render: function() {	 
	    var self = this;    
	    this.loadCollections().then(function() {		  
			    self.setAccessType();			    
			    self.$el.html(self.template({model:self.model.toJSON(), languages:self.languages, currentLanguageIndex:self.currentLanguageIndex, admLevels: self.admLevels,accessTypes: self.accessTypes, indicatorTypes: self.indicatorTypes, colors: self.colors }));
			    if(!self.user.get('logged')){
			    	MessageUtils.displayInfoMessage(self.$el, self.translator.translateSync('amp.gis-layers-manager:Info-PublicLayerStoredInBrowser','Since you are not logged in, self layer will be stored in the browser for 12 hours.'));
			    	self.$el.find('.btn-back').hide();
			    }else{
			    	self.$el.find('.btn-back').show();
			    	self.$el.find('.message-box').hide();
			    }	
			    
			    self.translate(self.$el);
			    self.$el.find('[data-toggle="tooltip"]').tooltip();
			    self.$el.show();
		  });    
	    
	    return this;
  },  
  findColors: function(id){
	  return this.colors.find(function(model) { 
		   var fields = _.keys(model.attributes);
		   return _.contains(fields, id);		  
	  });
  },
  setAccessType: function(){
	  var self = this;
	  if(_.isUndefined(self.model.get('id'))){
	    	if(self.user.get('logged')){
	    		//if admin - default access type is Standard else default is Private	    	
		    	if(self.user.get('administratorMode')){
		    		self.model.set('accessTypeId', Constants.AccessType.STANDARD);
		    	}else{
		    		self.model.set('accessTypeId', Constants.AccessType.PRIVATE);
		    	}
	    	}else{
	    		self.model.set('accessTypeId', Constants.AccessType.TEMPORARY);
	    	}	    	    	
	    }     
  },
  next: function(e){
	  var self = this;
	  var target = e.target;
	  var current = $(target).attr("data-current");	 
	  self.$el.find('.message-box').empty();
	  self.$el.find('.message-box').hide();
	  Validator[current]({model:this.model,translator:this.translator, settings:this.settings, languages:this.languages, clone: self.clone}).then(function(errors){
		  if(errors.length === 0){
			  self.$el.find('.nav-pills a[href="#' + Steps[current].next + '"]').tab('show'); 
		  }else{
			  MessageUtils.displayErrors(self.$el, errors);
		  }  
	  });
	  	          	  
  },
  previous: function(e){
	  var target = e.target;
	  var current = $(target).attr("data-current");	
	  this.$el.find('.message-box').empty();
	  this.$el.find('.message-box').hide();
	  if(Steps[current].previous != current){		    
		  this.$el.find('.nav-pills a[href="#' + Steps[current].previous + '"]').tab('show');
	  }	 
  },  
  onInputChange: function(e){
	  var fieldName = $(e.target).attr('id');	  	  
	  if(_.contains(this.numericFields,fieldName)){		  
		  this.model.set(fieldName, parseInt($(e.target).val()));
	  }else{
		  this.model.set(fieldName, $(e.target).val());		  
	  }	  	  
  },
  onMultiLangInputChange: function(e){
	  var splits = $(e.target).attr('id').split('_');
	  var fieldName = splits[0];
	  var language = splits[1];	  
	  var current = this.model.get(fieldName);
	  if(!_.isObject(current)){
		  current = {};
	  }
	  current[language] = $(e.target).val();
	  this.model.set(fieldName,current);	  
  },
  onImportFileChange : function(e) {	 
	this.$el.find('.selected-file').html($(e.target)[0].files[0].name);	
  }, 
  loadCollections: function(){
	  var self = this;
	  var deffereds = [];
	  this.colors = new ColorCollection();
	  this.admLevels = new ADMCollection();
	  this.accessTypes = new AccessTypesCollection(); 
	  this.indicatorTypes = new IndicatorTypesCollection();
	  this.user = new UserModel(); 
	  deffereds.push(this.colors.fetch());
	  deffereds.push(this.admLevels.fetch());
	  deffereds.push(this.accessTypes.fetch());
	  deffereds.push(this.user.fetch());
	  deffereds.push(this.indicatorTypes.fetch());
	  
	  //TODO move to TranslationUtils.getAvailableLanguages()
	  var multilingual = this.settings.get('multilingual');
	  var currentLanguage = this.settings.get('language');
	  if(multilingual === 'true'){
	  	  deffereds.push(TranslationUtils.getAvailableLanguages().then(function (languages){
			  self.languages = languages;
			  var index = 0;
			  _.each(self.languages,function(lang) {
				  if (currentLanguage == lang) {
					  self.currentLanguageIndex = index;
				  }
				  index++;
			  });
		  })); 
	  }else{
		  var langs = [];
		  var defaultLanguage = this.settings.get('default-language');
		  langs.push(defaultLanguage);
		  self.languages = langs;
		  self.currentLanguageIndex = 0;
	  }
	  return $.when.apply($, deffereds);	  
  },  
  selectColors : function(e){	  	  
	  var color = this.findColors($(e.target).val());
	  this.model.set('colorRamp', color);
	  var colorRampId = parseInt($(e.target).val());
	  this.model.set('colorRampId', colorRampId);	  	  
  },
  submitLayer: function(){
	  var self = this;
	  // this is a way to transform sharedWorkspaces from an array of object (returned by the EP) to an array of id (number) that is what the Save EP except
	  var sWsIds = _.pluck(this.model.get('sharedWorkspaces'), 'id');
	  this.model.set('sharedWorkspaces', sWsIds);
	  self.model.save(null, {
		  type: 'POST',
		  url:'/rest/indicator/indicator-layer',
		  success: function (model, response) {
			  if(self.model.get('accessTypeId') === Constants.AccessType.TEMPORARY){
				  response.data.isStoredInLocalStorage = true;
				  response.data.lastUsed = Date.now()
				  LocalStorageService.saveLayer(response.data);
			  }
			  self.trigger('addLayer');
			  self.EventsBus.trigger(Events.WIZARD_CLOSED_EVENT);
		  },
		  error: function (model, response) {
		  }
	  });		 
  },
  backToList : function(){
	  this.EventsBus.trigger(Events.WIZARD_CLOSED_EVENT);
  },
  exportFile: function(){        
	  window.open('/rest/indicator/indicator-layer/download?admLevelId=' + this.model.get('admLevelId') + '&name=' + this.model.getName(this.settings), '_blank');
  },  
  importFile: function(currentStep){
	  var self = this;	  
	  var formData = new FormData();
	  var selectedFile = self.$el.find('.indicator-file')[0].files[0];
	  if(selectedFile){
		  formData.append('file', selectedFile);		  
		  formData.append('name',self.model.getName(self.settings));	
		  formData.append('admLevelId',self.model.get('admLevelId'));
		  self.$el.find('.progress-indicator').show();
		  $.ajax({
			  url : '/rest/indicator/indicator-layer/import',
			  type : 'POST',
			  data : formData,
			  processData: false, 
			  contentType: false,
			  success : self.onImportSuccesful,
			  error: self.onImportFailed
		  }); 
	  }	  
  },
  onImportSuccesful: function(data) {	        	 
	  if(!_.isUndefined(data.values)){	
		  this.model.set('values', data.values);					
		  MessageUtils.displaySuccessMessage(this.$el, this.translator.translateSync('amp.gis-layers-manager:message-ImportSuccessful','The file was imported successfully.'));		        		 
	  }else{
		  MessageUtils.displayErrors(this.$el, [this.translator.translateSync('amp.gis-layers-manager:message-CouldNotImportFile','Could not import file. Please check the file format.')]);  
	  }		        	 
	  this.$el.find('.progress-indicator').hide();
  },
  onImportFailed: function(data){ 
	  var self = this;
	  var reponse = data.responseJSON;
	  var errors = [];
	  if(reponse.error){
		  var keys = _.keys(reponse.error);
		  _.each(keys,function(key){  
			  var Error = _.findWhere(ErrorCodes,{code: key});
			  if(!_.isUndefined(Error)){
				  errors.push(self.translator.translateSync(Error.translationKey,Error.defaultMessage));
			  }
		  });
	  }

	  //if no errors from server, show default error message
	  if(errors.length == 0){
		  errors.push(self.translator.translateSync('amp.gis-layers-manager:message-CouldNotImportFile','Could not import file. Please check the file format.'));
	  }	
	  MessageUtils.displayErrors(self.$el, errors);
	  this.$el.find('.progress-indicator').hide();
  },
  openTab: function (e) {	  
	  var el = $(e.currentTarget);
	  var context = el.attr("data-context");		  
	  $('.' + context).removeClass('focused');	  
	  el.addClass('focused');
	  var language = el.attr('data-label');
	  $('.' + context + '-tab').hide();
	  $('.' + context + '-tab.' + language).show();
	  e.preventDefault();
  },
  showFirstTab: function(){
	  $('.tab').removeClass('focused');
	  $('.save-tab').hide();

	  $('.first-tab').addClass('focused');
	  $('.first-tab-content').show();	
  },
  onZeroCategoryChange: function(e) {
	  this.model.set('zeroCategoryEnabled', $(e.target).is(":checked"));	 	
  }
  
});