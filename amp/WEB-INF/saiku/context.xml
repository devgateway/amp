<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
			   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<context:annotation-config />


	<!-- Saiku currently ships with basic authentication working out of the 
		box, below is also the code for Digest authentication, should you want digest 
		authentication for you application comment out the basic authentication block 
		and enable digest authentication. We are also working on other authentication 
		methods, namely OAuth and Remember me token based policies. To add and remove 
		users you currently have to edit WEB-INF/users.properties, this will be replaced 
		with an admin console in due course and you can also swap this out for JDBC 
		backed security lists and (although untested) technically LDAP etc. If you 
		modify these files in anyway it would be very useful if you sent us patches 
		for any useful changes you make. -->

	<!-- BASIC AUTHENTICATION -->


	<bean id="classpathDsManager"
		class="org.saiku.service.datasource.ClassPathResourceDatasourceManager">
		<property name="path" value="res:../saiku/saiku-datasources" />
	</bean>
	<!-- 
	<bean id="repositoryDsManager"
		class="org.saiku.service.datasource.RepositoryDatasourceManager"
		init-method="load">
		<property name="userService" ref="userServiceBean" />
	</bean>
	-->
	<!-- <property name="path" value="file:///var/saiku/saiku-datasources/"/> -->

	<bean id="sessionService" class="org.saiku.service.AnonymousSessionService">
<!-- 		<property name="authenticationManager" ref="authenticationManager" />
		<property name="allowAnonymous" value="true" /> -->
	</bean>

	<bean id="connectionManager" class="org.saiku.web.impl.SecurityAwareConnectionManager"
		init-method="init" destroy-method="destroy">
		<property name="dataSourceManager" ref="classpathDsManager" />
		<property name="sessionService" ref="sessionService" />

	</bean>

	<bean id="datasourceServiceBean" class="org.dgfoundation.amp.reports.saiku.AMPDatasourceService">
		<property name="connectionManager" ref="connectionManager" />
	</bean>

	<bean id="userServiceBean" class="org.saiku.service.user.UserService">
		<property name="iDatasourceManager" ref="classpathDsManager" />
		<property name="adminRoles">
			<list>
				<value>ROLE_ADMIN</value>
			</list>
		</property>
		<property name="sessionService" ref="sessionService" />
	</bean>
	<bean id="adminBean" class="org.saiku.web.rest.resources.AdminResource">
		<property name="userService" ref="userServiceBean" />
		<property name="datasourceService" ref="datasourceServiceBean" />
		<property name="olapDiscoverService" ref="olapDiscoverServiceBean" />
	</bean>
	<bean class="org.saiku.datasources.connection.MondrianVFS"
		init-method="init">
		<property name="datasourceManager" ref="classpathDsManager" />
	</bean>
	<bean id="olapDiscoverServiceBean" class="org.saiku.service.olap.OlapDiscoverService">
		<property name="datasourceService" ref="datasourceServiceBean" />
	</bean>

	<bean id="olapQueryBean" scope="session"
		class="org.saiku.service.olap.OlapQueryService" destroy-method="destroy">
		<property name="olapDiscoverService" ref="olapDiscoverServiceBean" />
	</bean>


	<bean id="datasourceResourceBean" class="org.saiku.web.rest.resources.DataSourceResource">
		<property name="datasourceService" ref="datasourceServiceBean" />
	</bean>

	<bean id="olapDiscoverBean" scope="session"
		class="org.saiku.web.rest.resources.OlapDiscoverResource">
		<property name="olapDiscoverService" ref="olapDiscoverServiceBean" />
	</bean>


	<bean id="queryResource" scope="request"
		class="org.saiku.web.rest.resources.QueryResource">
		<property name="olapQueryService" ref="olapQueryBean" />
		<property name="olapDiscoverService" ref="olapDiscoverServiceBean" />
	</bean>

	<bean id="thinQueryBean" scope="session"
		class="org.saiku.service.olap.ThinQueryService">
		<property name="olapDiscoverService" ref="olapDiscoverServiceBean" />
	</bean>

	<bean id="platformBean" class="org.dgfoundation.amp.reports.saiku.PlatformUtilsServiceAMP">
		<property name="path" value="/../../TEMPLATE/ampTemplate/saikuui/js/saiku/plugins" />
	</bean>

	<bean id="infoResource" class="org.saiku.web.rest.resources.InfoResource">
		<property name="platformUtilsService" ref="platformBean" />
	</bean>

	<bean id="queryResource2" scope="request"
		class="org.saiku.web.rest.resources.Query2Resource">
		<property name="thinQueryService" ref="thinQueryBean" />
	</bean>

	<bean id="sessionResource" class="org.saiku.web.rest.resources.SessionResource">
		<property name="sessionService" ref="sessionService" />
		<property name="userService" ref="userServiceBean" />

	</bean>

	<bean id="repository2bean" scope="request"
		class="org.saiku.web.rest.resources.BasicRepositoryResource2">
		<property name="path" value="res:../saiku/saiku-repository" />
		<property name="sessionService" ref="sessionService" />
		<property name="datasourceService" ref="datasourceServiceBean" />
	</bean>
	<!-- <property name="path" value="file:///var/saiku/saiku-datasources/"/> -->

	<bean id="tagRepositoryBean" scope="request"
		class="org.saiku.web.rest.resources.BasicTagRepositoryResource">
		<property name="olapQueryService" ref="olapQueryBean" />
		<property name="path" value="res:../saiku/saiku-repository" />
	</bean>

	<bean id="filterRepositoryBean" scope="session"
		class="org.saiku.web.rest.resources.FilterRepositoryResource">
		<property name="olapQueryService" ref="olapQueryBean" />
		<property name="path" value="res:../saiku/saiku-repository" />
	</bean>



	<bean id="exporterBean" scope="request"
		class="org.saiku.web.rest.resources.ExporterResource">
		<property name="repository" ref="repository2bean" />
		<property name="query2Resource" ref="queryResource2" />
	</bean>



	<bean id="statsBean" scope="singleton"
		class="org.saiku.web.rest.resources.StatisticsResource" />

	<bean id="startupBean" scope="singleton"
		class="org.saiku.web.rest.util.StartupResource" init-method="init" />


  <!-- global handler mapping interceptors -->
  <util:list id="enunciate-handler-interceptors" xmlns:util="http://www.springframework.org/schema/util">
  </util:list>

  <bean name="service-bean-interceptors" class="java.util.ArrayList">
    <qualifier value="enunciate-service-bean-interceptors"/>
    <constructor-arg>
      <list>
      </list>
    </constructor-arg>
  </bean>

  <!-- default, no-op, security checker --> 
  <bean class="org.codehaus.enunciate.service.DefaultSecurityExceptionChecker"/>
</beans>
