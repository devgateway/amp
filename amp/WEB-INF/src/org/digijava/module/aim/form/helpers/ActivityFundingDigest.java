// Generated by delombok at Mon Mar 24 00:10:06 EET 2014
package org.digijava.module.aim.form.helpers;


import java.util.*;

import org.dgfoundation.amp.ar.AmpARFilter;
import org.digijava.kernel.request.TLSUtils;
import org.digijava.module.aim.dbentity.AmpActivityVersion;
import org.digijava.module.aim.dbentity.AmpApplicationSettings;
import org.digijava.module.aim.dbentity.AmpCategoryValueLocations;
import org.digijava.module.aim.dbentity.AmpCurrency;
import org.digijava.module.aim.dbentity.AmpFunding;
import org.digijava.module.aim.dbentity.AmpOrgRole;
import org.digijava.module.aim.dbentity.AmpOrganisation;
import org.digijava.module.aim.dbentity.AmpRole;
import org.digijava.module.aim.form.ProposedProjCost;
import org.digijava.module.aim.helper.Constants;
import org.digijava.module.aim.helper.FilterParams;
import org.digijava.module.aim.helper.FormatHelper;
import org.digijava.module.aim.helper.Funding;
import org.digijava.module.aim.helper.FundingDetail;
import org.digijava.module.aim.helper.FundingOrganization;
import org.digijava.module.aim.helper.FundingValidator;
import org.digijava.module.aim.helper.GlobalSettingsConstants;
import org.digijava.module.aim.helper.KeyValue;
import org.digijava.module.aim.helper.TeamMember;
import org.digijava.module.aim.logic.FundingCalculationsHelper;
import org.digijava.module.aim.util.DecimalWraper;
import org.digijava.module.aim.util.FeaturesUtil;
import org.digijava.module.fundingpledges.dbentity.FundingPledges;

import java.text.DecimalFormat;
import java.text.NumberFormat;

import javax.servlet.http.HttpSession;

/**
 * funding digest for a full activity
 * moved from being previously the inner class EditActivityForm::Funding (clashing name with org.digijava.module.aim.helper.Funding)
 * @author Dolghier Constantin.
 */
public class ActivityFundingDigest {
    private ProposedProjCost proProjCost;
    private ProposedProjCost revProjCost;
    private List<ProposedProjCost> proposedAnnualBudgets;
    private List<FundingOrganization> fundingOrganizations;
    private String donorObjective;
    private List<FundingDetail> fundingDetails;
    private String totalCommitments;
    private String totalPlannedCommitments;
    private String totalPlannedRoF;
    private String totalPlannedEDD;
    private String totalActualRoF;
    private String totalActualEDD;
    private String totalPipelineCommitments;
    private String totalOdaSscCommitments;
    private String totalTriangularSscCommitments;
    private String totalBilateralSscCommitments;
    private double totalCommitmentsDouble;
    private String totalDisbursements;
    private String totalArrears;
    private String totalPlannedArrears;
    private String totalPipelineArrears;
    private String totalExpenditures;
    private String totalPlannedExpenditures;
    private String totalPlannedDisbursements;
    private String totalPlannedDisbursementsOrders;
    private String totalActualDisbursementsOrders;
    private String unDisbursementsBalance;
    private String totalMtefProjections;
    private boolean fixerate;
    private double regionTotalDisb;
    private Collection orderedFundingOrganizations;
    private Collection financingBreakdown = null;
    private String deliveryRate;
    // Add Funding fields
    private Collection organizations;
    private Collection<AmpCurrency> validcurrencies;
    private Collection<FundingPledges> pledgeslist;
    private boolean dupFunding;
    private String orgName;
    private Long assistanceType = null; // this is id of a category value from category Type Of Assistance
    private Long modality = null; // this is id of a category value from category Financing Instrument
    private Long fundingStatus = null; // this is id of a category value from category Funding Status
    private Long modeOfPayment = null; // this is id of a category value from category Mode Of Payment
    //private List<MTEFProjection> fundingMTEFProjections;
    private List<KeyValue> availableMTEFProjectionYears;
    private Collection projections;
    private String orgFundingId;
    private String sourceRole;
    private int numComm;
    private int numDisb;
    private int numExp;
    private int numDisbOrder;
    private int numProjections;
    private String disbOrderId;
    private String signatureDate;
    private String reportingDate;
    private String plannedStartDate;
    private String plannedCompletionDate;
    private String actualStartDate;
    private String actualCompletionDate;
    private String fundingConditions;
    // flags field
    private boolean firstSubmit;
    private String event;
    private boolean editFunding;
    private Long fundDonor;
    private Long fundingId;
    private Long fundingRegionId;
    private Collection<AmpCategoryValueLocations> fundingRegions;
    private Long[] selRegFundings;
    private Collection regionalFundings;
    private Long[] selFundingOrgs;
    private long orgId;
    private int offset;
    private int indexId;
    private long transIndexId;
    private String fundingCurrCode;
    private int selectedMTEFProjectionYear;
    private float capitalSpendingPercentage;
    private boolean showActual;
    private boolean showPlanned;
    private boolean showPipeline;
    private boolean showOfficialDevelopmentAid;
    private boolean showBilateralSsc;
    private boolean showTriangularSsc;
    
    public ActivityFundingDigest() {
    }
        
    /**
     * calculates various totals, populates {@link #fundingOrganizations} with funding sorted and digested by organization
     * @param activity 
     * @param toCurrCode
     * @param tm - ignored, left in case in the future the "buggy switch fundings to a common currency" would be enabled (AND FIXED FOR MTEF FUNDINGS!)
     * @param debug - whether to output debugging information to the results strings
     */
    public void populateFromFundings(AmpActivityVersion activity, String toCurrCode, TeamMember tm, boolean debug) {
        Collection<AmpFunding> fundings = activity.getFunding();
        FundingCalculationsHelper activityTotalCalculations = new FundingCalculationsHelper();
        activityTotalCalculations.setDebug(debug);
        Set<Long> fundingOrgIds = new HashSet<Long>();
        ArrayList<FundingOrganization> fundingOrgs = new ArrayList<FundingOrganization>();
        Iterator<AmpFunding> fundItr = fundings.iterator();
        
        while (fundItr.hasNext()) {
            AmpFunding ampFunding = fundItr.next();
            AmpRole fundingSourceRole = ampFunding.getSourceRole();
            if (fundingSourceRole != null &&
                    (Constants.FUNDING_AGENCY.equals(fundingSourceRole.getRoleCode()) ||
                    !ampFunding.getFundingDetails().isEmpty())) {
                AmpOrganisation org = ampFunding.getAmpDonorOrgId();
                if (org == null || org.getAmpOrgId() == null) continue;
                FundingOrganization fundOrg = new FundingOrganization(ampFunding);
                Funding fund = new Funding(ampFunding, activityTotalCalculations, toCurrCode, false /*isPreview*/, tm);
                if (fund.getFundingDetails() != null && fund.getFundingDetails().size() > 0) {
                    if (this.getFundingDetails() == null) this.setFundingDetails(new ArrayList<FundingDetail>());
                    this.getFundingDetails().addAll(new ArrayList<FundingDetail>(fund.getFundingDetails()));
                }
                int index = fundingOrgs.indexOf(fundOrg);
                
                if (index > -1) {
                    fundOrg = (FundingOrganization)fundingOrgs.get(index);
                }
                if (fundOrg.getFundings() == null) fundOrg.setFundings(new ArrayList<Funding>());
                fundOrg.getFundings().add(fund);
                if (index > -1) {
                    fundingOrgs.set(index, fundOrg);
                } else {
                    fundingOrgs.add(fundOrg);
                    fundingOrgIds.add(fundOrg.getAmpOrgId());
                }
            }
        }
        
        // Add missing donor organizations from activity orgrole list 
        Set<AmpOrgRole> orgRoles = activity.getOrgrole();
        for (AmpOrgRole aor : orgRoles) {
            if (Constants.FUNDING_AGENCY.equals(aor.getRole().getRoleCode())
                    && !fundingOrgIds.contains(aor.getOrganisation().getAmpOrgId())) {
                
                FundingOrganization fundingOrganization = new FundingOrganization();
                fundingOrganization.setAmpOrgId(aor.getOrganisation().getAmpOrgId());
                fundingOrganization.setOrgName(aor.getOrganisation().getName());
                fundingOrganization.setFundings(new ArrayList<Funding>());
                fundingOrgs.add(fundingOrganization);
                fundingOrgIds.add(aor.getAmpOrgRoleId());
            }
        }
        
        // Added for the calculation of the subtotal per Organization
        for (FundingOrganization currFundingOrganization : fundingOrgs) {
            for (Funding currFunding : currFundingOrganization.getFundings()) {
                FundingCalculationsHelper calculationsSubtotal = new FundingCalculationsHelper();
                if (currFunding.getFundingDetails() != null) {
                    try {
                        calculationsSubtotal.doCalculations(currFunding.getAmpRawFunding(), toCurrCode, true);
                        currFunding.setSubtotalPlannedCommitments(formatNumber(calculationsSubtotal.getTotPlannedComm().doubleValue()));
                        currFunding.setSubtotalActualCommitments(formatNumber(calculationsSubtotal.getTotActualComm().doubleValue()));
                        currFunding.setSubtotalPipelineCommitments(formatNumber(calculationsSubtotal.getTotPipelineComm().doubleValue()));
                        currFunding.setSubtotalPlannedArrears(formatNumber(calculationsSubtotal.getTotPlannedArrears().doubleValue()));
                        currFunding.setSubtotalActualArrears(formatNumber(calculationsSubtotal.getTotActualArrears().doubleValue()));
                        currFunding.setSubtotalPipelineArrears(formatNumber(calculationsSubtotal.getTotPipelineArrears().doubleValue()));
                        currFunding.setSubtotalOfficialDevelopmentAidCommitments(formatNumber(calculationsSubtotal.getTotOdaSscComm().doubleValue()));
                        currFunding.setSubtotalBilateralSscCommitments(formatNumber(calculationsSubtotal.getTotBilateralSscComm().doubleValue()));
                        currFunding.setSubtotalTriangularSscCommitments(formatNumber(calculationsSubtotal.getTotTriangularSscComm().doubleValue()));
                        currFunding.setSubtotalPlannedDisbursements(formatNumber(calculationsSubtotal.getTotPlanDisb().doubleValue()));
                        currFunding.setSubtotalPipelineDisbursements(formatNumber(calculationsSubtotal.getTotPipelineDisb().doubleValue()));
                        currFunding.setSubtotalDisbursements(formatNumber(calculationsSubtotal.getTotActualDisb().doubleValue()));
                        currFunding.setSubtotalPlannedExpenditures(formatNumber(calculationsSubtotal.getTotPlannedExp().doubleValue()));
                        currFunding.setSubtotalPipelineExpenditures(formatNumber(calculationsSubtotal.getTotPipelineExp().doubleValue()));
                        currFunding.setSubtotalExpenditures(formatNumber(calculationsSubtotal.getTotActualExp().doubleValue()));
                        currFunding.setSubtotalMTEFs(formatNumber(calculationsSubtotal.getTotalMtef().doubleValue()));
                        currFunding.setSubtotalMTEFsPipeline(formatNumber(calculationsSubtotal.getTotalMtefPipeline().doubleValue()));
                        currFunding.setSubtotalMTEFsProjection(formatNumber(calculationsSubtotal.getTotalMtefProjection().doubleValue()));
                        currFunding.setSubtotalActualDisbursementsOrders(formatNumber(calculationsSubtotal.getTotActualDisbOrder().doubleValue()));
                        currFunding.setSubtotalPlannedDisbursementsOrders(formatNumber(calculationsSubtotal.getTotPlannedDisbOrder().doubleValue()));
                        currFunding.setSubtotalPipelineDisbursementsOrders(formatNumber(calculationsSubtotal.getTotPipelineDisbOrder().doubleValue()));
                        currFunding.setUndisbursementbalance(formatNumber(calculationsSubtotal.getUnDisbursementsBalance().doubleValue()));
                        currFunding.cleanAmpRawFunding();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
        // logger.info("size = " + fundingOrgs);
        Collections.sort(fundingOrgs);
        this.setFundingOrganizations(fundingOrgs);
        //get the total depend of the
        if (debug) {
            this.setTotalCommitments(activityTotalCalculations.getTotalCommitments().getCalculations());
            this.setTotalCommitmentsDouble(activityTotalCalculations.getTotalCommitments().getValue().doubleValue());
            this.setTotalDisbursements(activityTotalCalculations.getTotActualDisb().getCalculations());
            this.setTotalPlannedDisbursements(activityTotalCalculations.getTotPlanDisb().getCalculations());
            this.setTotalExpenditures(activityTotalCalculations.getTotPlannedExp().getCalculations());
            this.setTotalPlannedCommitments(activityTotalCalculations.getTotPlannedComm().getCalculations());
            this.setTotalPlannedRoF(activityTotalCalculations.getTotPlannedReleaseOfFunds().getCalculations());
            this.setTotalPlannedEDD(activityTotalCalculations.getTotPlannedEDD().getCalculations());
            this.setTotalPipelineCommitments(activityTotalCalculations.getTotPipelineComm().getCalculations());
            this.setTotalPlannedExpenditures(activityTotalCalculations.getTotPlannedExp().getCalculations());
            this.setTotalPlannedArrears(activityTotalCalculations.getTotActualArrears().getCalculations());
            this.setTotalPlannedArrears(activityTotalCalculations.getTotPlannedArrears().getCalculations());
            
            this.setTotalActualDisbursementsOrders(activityTotalCalculations.getTotActualDisbOrder().getCalculations());
            this.setTotalPlannedDisbursementsOrders(activityTotalCalculations.getTotPlannedDisbOrder().getCalculations());
            this.setUnDisbursementsBalance(activityTotalCalculations.getUnDisbursementsBalance().getCalculations());
        } else {
            // actual
            this.setTotalCommitments(formatTotals(activityTotalCalculations.getTotActualComm()));
            this.setTotalDisbursements(formatTotals(activityTotalCalculations.getTotActualDisb()));
            this.setTotalExpenditures(formatTotals(activityTotalCalculations.getTotActualExp()));
            this.setTotalActualDisbursementsOrders(formatTotals(activityTotalCalculations.getTotActualDisbOrder()));
            this.setTotalActualRoF(formatTotals(activityTotalCalculations.getTotActualReleaseOfFunds()));
            this.setTotalActualEDD(formatTotals(activityTotalCalculations.getTotActualEDD()));
            this.setTotalArrears(formatTotals(activityTotalCalculations.getTotActualArrears()));
            // planned
            this.setTotalPlannedDisbursements(formatTotals(activityTotalCalculations.getTotPlanDisb()));
            this.setTotalPlannedCommitments(formatTotals(activityTotalCalculations.getTotPlannedComm()));
            this.setTotalPlannedExpenditures(formatTotals(activityTotalCalculations.getTotPlannedExp()));
            this.setTotalPlannedDisbursementsOrders(formatTotals(activityTotalCalculations.getTotPlannedDisbOrder()));
            this.setTotalPlannedRoF(formatTotals(activityTotalCalculations.getTotPlannedReleaseOfFunds()));
            this.setTotalPlannedEDD(formatTotals(activityTotalCalculations.getTotPlannedEDD()));
            this.setUnDisbursementsBalance(formatTotals(activityTotalCalculations.getUnDisbursementsBalance()));
            this.setTotalMtefProjections(formatTotals(activityTotalCalculations.getTotalMtef()));
            this.setTotalPlannedArrears(formatTotals(activityTotalCalculations.getTotPlannedArrears()));
            // pipeline
            this.setTotalPipelineArrears(formatTotals(activityTotalCalculations.getTotPipelineArrears()));
            this.setTotalPipelineCommitments(formatTotals(activityTotalCalculations.getTotPipelineComm()));
            // ssc
            this.setTotalOdaSscCommitments(formatTotals(activityTotalCalculations.getTotOdaSscComm()));
            this.setTotalBilateralSscCommitments(formatTotals(activityTotalCalculations.getTotBilateralSscComm()));
            this.setTotalTriangularSscCommitments(formatTotals(activityTotalCalculations.getTotTriangularSscComm()));
        }
        // calculate delivery rates

        if (activityTotalCalculations.getTotActualComm() != null && activityTotalCalculations.getTotActualComm().doubleValue() != 0 && activityTotalCalculations.getTotActualDisb() != null && activityTotalCalculations.getTotActualDisb().doubleValue() != 0) {
            double deliveryRate = activityTotalCalculations.getTotActualDisb().doubleValue() / activityTotalCalculations.getTotActualComm().doubleValue();
            NumberFormat formatter = DecimalFormat.getPercentInstance();
            this.setDeliveryRate(formatter.format(deliveryRate));
        }
    }
    
    protected String formatNumber(Double val) {
        return FormatHelper.formatNumber(FeaturesUtil.applyThousandsForVisibility(val));
    }

    protected String formatTotals(DecimalWraper val) {
        return formatNumber(val.doubleValue());
    }
    
    // TODO: Constantin - when doing the rewrite, all we need are flags, not lists
    public List<FundingDetail> getCommitmentsDetails() {
        if (fundingDetails != null) {
            List<FundingDetail> commitments = new ArrayList<FundingDetail>();
            for (FundingDetail detail : fundingDetails) {
                if (detail.getTransactionType() == Constants.COMMITMENT) commitments.add(detail);
            }
            return commitments;
        }
        return null;
    }
    
    public List<FundingDetail> getDisbursementsDetails() {
        if (fundingDetails != null) {
            List<FundingDetail> disbursements = new ArrayList<FundingDetail>();
            for (FundingDetail detail : fundingDetails) {
                if (detail.getTransactionType() == Constants.DISBURSEMENT) disbursements.add(detail);
            }
            return disbursements;
        }
        return null;
    }
    
    public List<FundingDetail> getDisbursementOrdersDetails() {
        if (fundingDetails != null) {
            List<FundingDetail> disbursementOrder = new ArrayList<FundingDetail>();
            for (FundingDetail detail : fundingDetails) {
                if (detail.getTransactionType() == Constants.DISBURSEMENT_ORDER) disbursementOrder.add(detail);
            }
            return disbursementOrder;
        }
        return null;
    }
    
    public List<FundingDetail> getExpendituresDetails() {
        if (fundingDetails != null) {
            List<FundingDetail> expenditures = new ArrayList<FundingDetail>();
            for (FundingDetail detail : fundingDetails) {
                if (detail.getTransactionType() == Constants.EXPENDITURE) expenditures.add(detail);
            }
            return expenditures;
        }
        return null;
    }
    
    public List<FundingDetail> getMtefDetails() {
        if (fundingDetails != null) {
            List<FundingDetail> mtefs = new ArrayList<FundingDetail>();
            for (FundingDetail detail : fundingDetails) {
                if (detail.getTransactionType() == Constants.MTEFPROJECTION) mtefs.add(detail);
            }
            return mtefs;
        }
        return null;
    }
    
    public Collection<AmpCategoryValueLocations> getFundingRegionsUnique() {
        Collection<AmpCategoryValueLocations> unique = new ArrayList<AmpCategoryValueLocations>();
        Iterator<AmpCategoryValueLocations> it = fundingRegions.iterator();
        while (it.hasNext()) {
            AmpCategoryValueLocations val = (AmpCategoryValueLocations)it.next();
            if (!unique.contains(val)) unique.add(val);
        }
        return unique;
    }
    
    public boolean isDisbursementOrders() {
        boolean disbOrdersExist = false;
        if (fundingDetails != null && fundingDetails.size() > 0) {
            Iterator<FundingDetail> detailIter = fundingDetails.iterator();
            while (detailIter.hasNext()) {
                FundingDetail det = detailIter.next();
                if (det.getTransactionType() == 4) {
                    disbOrdersExist = true;
                    break;
                }
            }
        }
        return disbOrdersExist;
    }
    
    public boolean isFixerate() {
        this.fixerate = false;
        if (fundingDetails != null) {
            Iterator iter = fundingDetails.iterator();
            while (iter.hasNext()) {
                FundingDetail element = (FundingDetail)iter.next();
                if (element.getFixedExchangeRate() != null) {
                    this.fixerate = true;
                    break;
                }
            }
        }
        return fixerate;
    }
    
    public static final FilterParams buildFilterParams() {
        HttpSession session = TLSUtils.getRequest().getSession();
        FilterParams fp = (FilterParams)session.getAttribute("filterParams");
        if (fp == null) {
            fp = new FilterParams();
            int year = new GregorianCalendar().get(Calendar.YEAR);
            fp.setFromYear(year - Constants.FROM_YEAR_RANGE);
            fp.setToYear(year + Constants.TO_YEAR_RANGE);
        }
        AmpApplicationSettings appSettings = AmpARFilter.getEffectiveSettings();
        if (appSettings != null) {
            String currCode = appSettings.getCurrency().getCurrencyCode();
            if (currCode != null) {
                fp.setCurrencyCode(currCode);
            }
            if (fp.getFiscalCalId() == null) {
                if (appSettings.getFiscalCalendar() != null) {
                    fp.setFiscalCalId(appSettings.getFiscalCalendar().getAmpFiscalCalId());
                } else {
                    fp.setFiscalCalId(FeaturesUtil.getGlobalSettingValueLong(GlobalSettingsConstants.DEFAULT_CALENDAR));
                }
            }
        }
        return fp;
    }
    
    public void fillFinancialBreakdowns(Long activityId, Collection<AmpFunding> ampFundingsAux, boolean debug) {
        //Collection ampFundingsAux = DbUtil.getAmpFunding(activityId);
//      TeamMember teamMember = (TeamMember) session.getAttribute("currentMember");
//      FilterParams fp = buildFilterParams();
//
//      Collection<FinancingBreakdown> fb = FinancingBreakdownWorker.getFinancingBreakdownList(activityId, ampFundingsAux, fp, debug);
//      this.setFinancingBreakdown(fb);
//      String overallTotalCommitted = "";
//      String overallTotalDisbursed = "";
//      String overallTotalUnDisbursed = "";
//      String overallTotalExpenditure = "";
//      String overallTotalUnExpended = "";
//      String overallTotalDisburOrder = "";
//
//      overallTotalCommitted = FinancingBreakdownWorker.getOverallTotal(fb, Constants.COMMITMENT, Constants.ACTUAL, debug);
//      overallTotalDisbursed = FinancingBreakdownWorker.getOverallTotal(fb, Constants.DISBURSEMENT,Constants.ACTUAL,debug);
//      overallTotalDisburOrder=FinancingBreakdownWorker.getOverallTotal(fb, Constants.DISBURSEMENT_ORDER,Constants.ACTUAL,debug);
//      if(!debug)
//      {
//          overallTotalUnDisbursed = FormatHelper.getDifference(overallTotalCommitted, overallTotalDisbursed);
//      }
//      else
//      {
//          overallTotalUnDisbursed =overallTotalCommitted + "-" +overallTotalDisbursed;
//      }
//      overallTotalExpenditure = FinancingBreakdownWorker.getOverallTotal(fb, Constants.EXPENDITURE,Constants.ACTUAL,debug);
//      if(!debug)
//      {
//          overallTotalUnExpended = FormatHelper.getDifference(overallTotalDisbursed, overallTotalExpenditure);
//      }
//      else
//      {
//          overallTotalExpenditure = overallTotalDisbursed+ "-" + overallTotalExpenditure;
//      }
//
//      this.setTotalCommitted(overallTotalCommitted);
//      this.setTotalDisbursed(overallTotalDisbursed);
//      this.setTotalExpended(overallTotalExpenditure);
//      this.setTotalUnDisbursed(overallTotalUnDisbursed);
//      this.setTotalUnExpended(overallTotalUnExpended);
//      this.setTotalDisbOrder(overallTotalDisburOrder);
    }
    
    @java.lang.SuppressWarnings("all")
    public ProposedProjCost getProProjCost() {
        return this.proProjCost;
    }
    
    /**
     * @return the revProjCost
     */
    public ProposedProjCost getRevProjCost() {
        return revProjCost;
    }

    /**
     * @param revProjCost the revProjCost to set
     */
    public void setRevProjCost(ProposedProjCost revProjCost) {
        this.revProjCost = revProjCost;
    }

    @java.lang.SuppressWarnings("all")
    public List<ProposedProjCost> getProposedAnnualBudgets() {
        return this.proposedAnnualBudgets;
    }
    
    @java.lang.SuppressWarnings("all")
    public List<FundingOrganization> getFundingOrganizations() {
        return this.fundingOrganizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getDonorObjective() {
        return this.donorObjective;
    }
    
    @java.lang.SuppressWarnings("all")
    public List<FundingDetail> getFundingDetails() {
        return this.fundingDetails;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalCommitments() {
        return this.totalCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedCommitments() {
        return this.totalPlannedCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedRoF() {
        return this.totalPlannedRoF;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedEDD() {
        return this.totalPlannedEDD;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalActualRoF() {
        return this.totalActualRoF;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalActualEDD() {
        return this.totalActualEDD;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPipelineCommitments() {
        return this.totalPipelineCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalOdaSscCommitments() {
        return this.totalOdaSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalTriangularSscCommitments() {
        return this.totalTriangularSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalBilateralSscCommitments() {
        return this.totalBilateralSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public double getTotalCommitmentsDouble() {
        return this.totalCommitmentsDouble;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalDisbursements() {
        return this.totalDisbursements;
    }
    

    public String getTotalArrears() {
        return this.totalArrears;
    }
    
    public String getTotalPlannedArrears() {
        return this.totalPlannedArrears;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalExpenditures() {
        return this.totalExpenditures;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedExpenditures() {
        return this.totalPlannedExpenditures;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedDisbursements() {
        return this.totalPlannedDisbursements;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalPlannedDisbursementsOrders() {
        return this.totalPlannedDisbursementsOrders;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalActualDisbursementsOrders() {
        return this.totalActualDisbursementsOrders;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getUnDisbursementsBalance() {
        return this.unDisbursementsBalance;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getTotalMtefProjections() {
        return this.totalMtefProjections;
    }
    
    @java.lang.SuppressWarnings("all")
    public double getRegionTotalDisb() {
        return this.regionTotalDisb;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection getOrderedFundingOrganizations() {
        return this.orderedFundingOrganizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection getFinancingBreakdown() {
        return this.financingBreakdown;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getDeliveryRate() {
        return this.deliveryRate;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection getOrganizations() {
        return this.organizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection<AmpCurrency> getValidcurrencies() {
        return this.validcurrencies;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection<FundingPledges> getPledgeslist() {
        return this.pledgeslist;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isDupFunding() {
        return this.dupFunding;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getOrgName() {
        return this.orgName;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getAssistanceType() {
        return this.assistanceType;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getModality() {
        return this.modality;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getFundingStatus() {
        return this.fundingStatus;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getModeOfPayment() {
        return this.modeOfPayment;
    }
    
    @java.lang.SuppressWarnings("all")
    public List<KeyValue> getAvailableMTEFProjectionYears() {
        return this.availableMTEFProjectionYears;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection getProjections() {
        return this.projections;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getOrgFundingId() {
        return this.orgFundingId;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getSourceRole() {
        return this.sourceRole;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getNumComm() {
        return this.numComm;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getNumDisb() {
        return this.numDisb;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getNumExp() {
        return this.numExp;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getNumDisbOrder() {
        return this.numDisbOrder;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getNumProjections() {
        return this.numProjections;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getDisbOrderId() {
        return this.disbOrderId;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getSignatureDate() {
        return this.signatureDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getReportingDate() {
        return this.reportingDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getPlannedStartDate() {
        return this.plannedStartDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getPlannedCompletionDate() {
        return this.plannedCompletionDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getActualStartDate() {
        return this.actualStartDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getActualCompletionDate() {
        return this.actualCompletionDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getFundingConditions() {
        return this.fundingConditions;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isFirstSubmit() {
        return this.firstSubmit;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getEvent() {
        return this.event;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isEditFunding() {
        return this.editFunding;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getFundDonor() {
        return this.fundDonor;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getFundingId() {
        return this.fundingId;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long getFundingRegionId() {
        return this.fundingRegionId;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection<AmpCategoryValueLocations> getFundingRegions() {
        return this.fundingRegions;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long[] getSelRegFundings() {
        return this.selRegFundings;
    }
    
    @java.lang.SuppressWarnings("all")
    public Collection getRegionalFundings() {
        return this.regionalFundings;
    }
    
    @java.lang.SuppressWarnings("all")
    public Long[] getSelFundingOrgs() {
        return this.selFundingOrgs;
    }
    
    @java.lang.SuppressWarnings("all")
    public long getOrgId() {
        return this.orgId;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getOffset() {
        return this.offset;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getIndexId() {
        return this.indexId;
    }
    
    @java.lang.SuppressWarnings("all")
    public long getTransIndexId() {
        return this.transIndexId;
    }
    
    @java.lang.SuppressWarnings("all")
    public String getFundingCurrCode() {
        return this.fundingCurrCode;
    }
    
    @java.lang.SuppressWarnings("all")
    public int getSelectedMTEFProjectionYear() {
        return this.selectedMTEFProjectionYear;
    }
    
    @java.lang.SuppressWarnings("all")
    public float getCapitalSpendingPercentage() {
        return this.capitalSpendingPercentage;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowActual() {
        return this.showActual;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowPlanned() {
        return this.showPlanned;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowPipeline() {
        return this.showPipeline;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowOfficialDevelopmentAid() {
        return this.showOfficialDevelopmentAid;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowBilateralSsc() {
        return this.showBilateralSsc;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean isShowTriangularSsc() {
        return this.showTriangularSsc;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setProProjCost(final ProposedProjCost proProjCost) {
        this.proProjCost = proProjCost;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setProposedAnnualBudgets(final List<ProposedProjCost> proposedAnnualBudgets) {
        this.proposedAnnualBudgets = proposedAnnualBudgets;
    }

    public String getTotalPipelineArrears() {
        return totalPipelineArrears;
    }

    public void setTotalPipelineArrears(String totalPipelineArrears) {
        this.totalPipelineArrears = totalPipelineArrears;
    }   
    
    @java.lang.SuppressWarnings("all")
    public void setFundingOrganizations(final List<FundingOrganization> fundingOrganizations) {
        this.fundingOrganizations = fundingOrganizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setDonorObjective(final String donorObjective) {
        this.donorObjective = donorObjective;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingDetails(final List<FundingDetail> fundingDetails) {
        this.fundingDetails = fundingDetails;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalCommitments(final String totalCommitments) {
        this.totalCommitments = totalCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedCommitments(final String totalPlannedCommitments) {
        this.totalPlannedCommitments = totalPlannedCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedRoF(final String totalPlannedRoF) {
        this.totalPlannedRoF = totalPlannedRoF;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedEDD(final String totalPlannedEDD) {
        this.totalPlannedEDD = totalPlannedEDD;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalActualRoF(final String totalActualRoF) {
        this.totalActualRoF = totalActualRoF;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalActualEDD(final String totalActualEDD) {
        this.totalActualEDD = totalActualEDD;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPipelineCommitments(final String totalPipelineCommitments) {
        this.totalPipelineCommitments = totalPipelineCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalOdaSscCommitments(final String totalOdaSscCommitments) {
        this.totalOdaSscCommitments = totalOdaSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalTriangularSscCommitments(final String totalTriangularSscCommitments) {
        this.totalTriangularSscCommitments = totalTriangularSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalBilateralSscCommitments(final String totalBilateralSscCommitments) {
        this.totalBilateralSscCommitments = totalBilateralSscCommitments;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalCommitmentsDouble(final double totalCommitmentsDouble) {
        this.totalCommitmentsDouble = totalCommitmentsDouble;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalDisbursements(final String totalDisbursements) {
        this.totalDisbursements = totalDisbursements;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalArrears(final String totalArrears) {
        this.totalArrears = totalArrears;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedArrears(final String totalPlannedArrears) {
        this.totalPlannedArrears = totalPlannedArrears;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalExpenditures(final String totalExpenditures) {
        this.totalExpenditures = totalExpenditures;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedExpenditures(final String totalPlannedExpenditures) {
        this.totalPlannedExpenditures = totalPlannedExpenditures;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedDisbursements(final String totalPlannedDisbursements) {
        this.totalPlannedDisbursements = totalPlannedDisbursements;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalPlannedDisbursementsOrders(final String totalPlannedDisbursementsOrders) {
        this.totalPlannedDisbursementsOrders = totalPlannedDisbursementsOrders;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalActualDisbursementsOrders(final String totalActualDisbursementsOrders) {
        this.totalActualDisbursementsOrders = totalActualDisbursementsOrders;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setUnDisbursementsBalance(final String unDisbursementsBalance) {
        this.unDisbursementsBalance = unDisbursementsBalance;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTotalMtefProjections(final String totalMtefProjections) {
        this.totalMtefProjections = totalMtefProjections;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFixerate(final boolean fixerate) {
        this.fixerate = fixerate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setRegionTotalDisb(final double regionTotalDisb) {
        this.regionTotalDisb = regionTotalDisb;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOrderedFundingOrganizations(final Collection orderedFundingOrganizations) {
        this.orderedFundingOrganizations = orderedFundingOrganizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFinancingBreakdown(final Collection financingBreakdown) {
        this.financingBreakdown = financingBreakdown;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setDeliveryRate(final String deliveryRate) {
        this.deliveryRate = deliveryRate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOrganizations(final Collection organizations) {
        this.organizations = organizations;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setValidcurrencies(final Collection<AmpCurrency> validcurrencies) {
        this.validcurrencies = validcurrencies;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setPledgeslist(final Collection<FundingPledges> pledgeslist) {
        this.pledgeslist = pledgeslist;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setDupFunding(final boolean dupFunding) {
        this.dupFunding = dupFunding;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOrgName(final String orgName) {
        this.orgName = orgName;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setAssistanceType(final Long assistanceType) {
        this.assistanceType = assistanceType;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setModality(final Long modality) {
        this.modality = modality;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingStatus(final Long fundingStatus) {
        this.fundingStatus = fundingStatus;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setModeOfPayment(final Long modeOfPayment) {
        this.modeOfPayment = modeOfPayment;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setAvailableMTEFProjectionYears(final List<KeyValue> availableMTEFProjectionYears) {
        this.availableMTEFProjectionYears = availableMTEFProjectionYears;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setProjections(final Collection projections) {
        this.projections = projections;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOrgFundingId(final String orgFundingId) {
        this.orgFundingId = orgFundingId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setSourceRole(final String sourceRole) {
        this.sourceRole = sourceRole;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setNumComm(final int numComm) {
        this.numComm = numComm;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setNumDisb(final int numDisb) {
        this.numDisb = numDisb;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setNumExp(final int numExp) {
        this.numExp = numExp;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setNumDisbOrder(final int numDisbOrder) {
        this.numDisbOrder = numDisbOrder;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setNumProjections(final int numProjections) {
        this.numProjections = numProjections;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setDisbOrderId(final String disbOrderId) {
        this.disbOrderId = disbOrderId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setSignatureDate(final String signatureDate) {
        this.signatureDate = signatureDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setReportingDate(final String reportingDate) {
        this.reportingDate = reportingDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setPlannedStartDate(final String plannedStartDate) {
        this.plannedStartDate = plannedStartDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setPlannedCompletionDate(final String plannedCompletionDate) {
        this.plannedCompletionDate = plannedCompletionDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setActualStartDate(final String actualStartDate) {
        this.actualStartDate = actualStartDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setActualCompletionDate(final String actualCompletionDate) {
        this.actualCompletionDate = actualCompletionDate;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingConditions(final String fundingConditions) {
        this.fundingConditions = fundingConditions;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFirstSubmit(final boolean firstSubmit) {
        this.firstSubmit = firstSubmit;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setEvent(final String event) {
        this.event = event;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setEditFunding(final boolean editFunding) {
        this.editFunding = editFunding;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundDonor(final Long fundDonor) {
        this.fundDonor = fundDonor;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingId(final Long fundingId) {
        this.fundingId = fundingId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingRegionId(final Long fundingRegionId) {
        this.fundingRegionId = fundingRegionId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingRegions(final Collection<AmpCategoryValueLocations> fundingRegions) {
        this.fundingRegions = fundingRegions;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setSelRegFundings(final Long[] selRegFundings) {
        this.selRegFundings = selRegFundings;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setRegionalFundings(final Collection regionalFundings) {
        this.regionalFundings = regionalFundings;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setSelFundingOrgs(final Long[] selFundingOrgs) {
        this.selFundingOrgs = selFundingOrgs;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOrgId(final long orgId) {
        this.orgId = orgId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setOffset(final int offset) {
        this.offset = offset;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setIndexId(final int indexId) {
        this.indexId = indexId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setTransIndexId(final long transIndexId) {
        this.transIndexId = transIndexId;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setFundingCurrCode(final String fundingCurrCode) {
        this.fundingCurrCode = fundingCurrCode;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setSelectedMTEFProjectionYear(final int selectedMTEFProjectionYear) {
        this.selectedMTEFProjectionYear = selectedMTEFProjectionYear;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setCapitalSpendingPercentage(final float capitalSpendingPercentage) {
        this.capitalSpendingPercentage = capitalSpendingPercentage;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowActual(final boolean showActual) {
        this.showActual = showActual;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowPlanned(final boolean showPlanned) {
        this.showPlanned = showPlanned;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowPipeline(final boolean showPipeline) {
        this.showPipeline = showPipeline;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowOfficialDevelopmentAid(final boolean showOfficialDevelopmentAid) {
        this.showOfficialDevelopmentAid = showOfficialDevelopmentAid;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowBilateralSsc(final boolean showBilateralSsc) {
        this.showBilateralSsc = showBilateralSsc;
    }
    
    @java.lang.SuppressWarnings("all")
    public void setShowTriangularSsc(final boolean showTriangularSsc) {
        this.showTriangularSsc = showTriangularSsc;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ActivityFundingDigest)) return false;
        final ActivityFundingDigest other = (ActivityFundingDigest)o;
        if (!other.canEqual((java.lang.Object)this)) return false;
        final java.lang.Object this$proProjCost = this.getProProjCost();
        final java.lang.Object other$proProjCost = other.getProProjCost();
        if (this$proProjCost == null ? other$proProjCost != null : !this$proProjCost.equals(other$proProjCost)) return false;
        final java.lang.Object this$proposedAnnualBudgets = this.getProposedAnnualBudgets();
        final java.lang.Object other$proposedAnnualBudgets = other.getProposedAnnualBudgets();
        if (this$proposedAnnualBudgets == null ? other$proposedAnnualBudgets != null : !this$proposedAnnualBudgets.equals(other$proposedAnnualBudgets)) return false;
        final java.lang.Object this$fundingOrganizations = this.getFundingOrganizations();
        final java.lang.Object other$fundingOrganizations = other.getFundingOrganizations();
        if (this$fundingOrganizations == null ? other$fundingOrganizations != null : !this$fundingOrganizations.equals(other$fundingOrganizations)) return false;
        final java.lang.Object this$donorObjective = this.getDonorObjective();
        final java.lang.Object other$donorObjective = other.getDonorObjective();
        if (this$donorObjective == null ? other$donorObjective != null : !this$donorObjective.equals(other$donorObjective)) return false;
        final java.lang.Object this$fundingDetails = this.getFundingDetails();
        final java.lang.Object other$fundingDetails = other.getFundingDetails();
        if (this$fundingDetails == null ? other$fundingDetails != null : !this$fundingDetails.equals(other$fundingDetails)) return false;
        final java.lang.Object this$totalCommitments = this.getTotalCommitments();
        final java.lang.Object other$totalCommitments = other.getTotalCommitments();
        if (this$totalCommitments == null ? other$totalCommitments != null : !this$totalCommitments.equals(other$totalCommitments)) return false;
        final java.lang.Object this$totalPlannedCommitments = this.getTotalPlannedCommitments();
        final java.lang.Object other$totalPlannedCommitments = other.getTotalPlannedCommitments();
        if (this$totalPlannedCommitments == null ? other$totalPlannedCommitments != null : !this$totalPlannedCommitments.equals(other$totalPlannedCommitments)) return false;
        final java.lang.Object this$totalPlannedRoF = this.getTotalPlannedRoF();
        final java.lang.Object other$totalPlannedRoF = other.getTotalPlannedRoF();
        if (this$totalPlannedRoF == null ? other$totalPlannedRoF != null : !this$totalPlannedRoF.equals(other$totalPlannedRoF)) return false;
        final java.lang.Object this$totalPlannedEDD = this.getTotalPlannedEDD();
        final java.lang.Object other$totalPlannedEDD = other.getTotalPlannedEDD();
        if (this$totalPlannedEDD == null ? other$totalPlannedEDD != null : !this$totalPlannedEDD.equals(other$totalPlannedEDD)) return false;
        final java.lang.Object this$totalActualRoF = this.getTotalActualRoF();
        final java.lang.Object other$totalActualRoF = other.getTotalActualRoF();
        if (this$totalActualRoF == null ? other$totalActualRoF != null : !this$totalActualRoF.equals(other$totalActualRoF)) return false;
        final java.lang.Object this$totalActualEDD = this.getTotalActualEDD();
        final java.lang.Object other$totalActualEDD = other.getTotalActualEDD();
        if (this$totalActualEDD == null ? other$totalActualEDD != null : !this$totalActualEDD.equals(other$totalActualEDD)) return false;
        final java.lang.Object this$totalPipelineCommitments = this.getTotalPipelineCommitments();
        final java.lang.Object other$totalPipelineCommitments = other.getTotalPipelineCommitments();
        if (this$totalPipelineCommitments == null ? other$totalPipelineCommitments != null : !this$totalPipelineCommitments.equals(other$totalPipelineCommitments)) return false;
        final java.lang.Object this$totalOdaSscCommitments = this.getTotalOdaSscCommitments();
        final java.lang.Object other$totalOdaSscCommitments = other.getTotalOdaSscCommitments();
        if (this$totalOdaSscCommitments == null ? other$totalOdaSscCommitments != null : !this$totalOdaSscCommitments.equals(other$totalOdaSscCommitments)) return false;
        final java.lang.Object this$totalTriangularSscCommitments = this.getTotalTriangularSscCommitments();
        final java.lang.Object other$totalTriangularSscCommitments = other.getTotalTriangularSscCommitments();
        if (this$totalTriangularSscCommitments == null ? other$totalTriangularSscCommitments != null : !this$totalTriangularSscCommitments.equals(other$totalTriangularSscCommitments)) return false;
        final java.lang.Object this$totalBilateralSscCommitments = this.getTotalBilateralSscCommitments();
        final java.lang.Object other$totalBilateralSscCommitments = other.getTotalBilateralSscCommitments();
        if (this$totalBilateralSscCommitments == null ? other$totalBilateralSscCommitments != null : !this$totalBilateralSscCommitments.equals(other$totalBilateralSscCommitments)) return false;
        if (java.lang.Double.compare(this.getTotalCommitmentsDouble(), other.getTotalCommitmentsDouble()) != 0) return false;
        final java.lang.Object this$totalDisbursements = this.getTotalDisbursements();
        final java.lang.Object other$totalDisbursements = other.getTotalDisbursements();
        if (this$totalDisbursements == null ? other$totalDisbursements != null : !this$totalDisbursements.equals(other$totalDisbursements)) return false;
        final java.lang.Object this$totalExpenditures = this.getTotalExpenditures();
        final java.lang.Object other$totalExpenditures = other.getTotalExpenditures();
        if (this$totalExpenditures == null ? other$totalExpenditures != null : !this$totalExpenditures.equals(other$totalExpenditures)) return false;
        final java.lang.Object this$totalPlannedExpenditures = this.getTotalPlannedExpenditures();
        final java.lang.Object other$totalPlannedExpenditures = other.getTotalPlannedExpenditures();
        if (this$totalPlannedExpenditures == null ? other$totalPlannedExpenditures != null : !this$totalPlannedExpenditures.equals(other$totalPlannedExpenditures)) return false;
        final java.lang.Object this$totalPlannedDisbursements = this.getTotalPlannedDisbursements();
        final java.lang.Object other$totalPlannedDisbursements = other.getTotalPlannedDisbursements();
        if (this$totalPlannedDisbursements == null ? other$totalPlannedDisbursements != null : !this$totalPlannedDisbursements.equals(other$totalPlannedDisbursements)) return false;
        final java.lang.Object this$totalPlannedDisbursementsOrders = this.getTotalPlannedDisbursementsOrders();
        final java.lang.Object other$totalPlannedDisbursementsOrders = other.getTotalPlannedDisbursementsOrders();
        if (this$totalPlannedDisbursementsOrders == null ? other$totalPlannedDisbursementsOrders != null : !this$totalPlannedDisbursementsOrders.equals(other$totalPlannedDisbursementsOrders)) return false;
        final java.lang.Object this$totalActualDisbursementsOrders = this.getTotalActualDisbursementsOrders();
        final java.lang.Object other$totalActualDisbursementsOrders = other.getTotalActualDisbursementsOrders();
        if (this$totalActualDisbursementsOrders == null ? other$totalActualDisbursementsOrders != null : !this$totalActualDisbursementsOrders.equals(other$totalActualDisbursementsOrders)) return false;
        final java.lang.Object this$unDisbursementsBalance = this.getUnDisbursementsBalance();
        final java.lang.Object other$unDisbursementsBalance = other.getUnDisbursementsBalance();
        if (this$unDisbursementsBalance == null ? other$unDisbursementsBalance != null : !this$unDisbursementsBalance.equals(other$unDisbursementsBalance)) return false;
        final java.lang.Object this$totalMtefProjections = this.getTotalMtefProjections();
        final java.lang.Object other$totalMtefProjections = other.getTotalMtefProjections();
        if (this$totalMtefProjections == null ? other$totalMtefProjections != null : !this$totalMtefProjections.equals(other$totalMtefProjections)) return false;
        if (this.isFixerate() != other.isFixerate()) return false;
        if (java.lang.Double.compare(this.getRegionTotalDisb(), other.getRegionTotalDisb()) != 0) return false;
        final java.lang.Object this$orderedFundingOrganizations = this.getOrderedFundingOrganizations();
        final java.lang.Object other$orderedFundingOrganizations = other.getOrderedFundingOrganizations();
        if (this$orderedFundingOrganizations == null ? other$orderedFundingOrganizations != null : !this$orderedFundingOrganizations.equals(other$orderedFundingOrganizations)) return false;
        final java.lang.Object this$financingBreakdown = this.getFinancingBreakdown();
        final java.lang.Object other$financingBreakdown = other.getFinancingBreakdown();
        if (this$financingBreakdown == null ? other$financingBreakdown != null : !this$financingBreakdown.equals(other$financingBreakdown)) return false;
        final java.lang.Object this$deliveryRate = this.getDeliveryRate();
        final java.lang.Object other$deliveryRate = other.getDeliveryRate();
        if (this$deliveryRate == null ? other$deliveryRate != null : !this$deliveryRate.equals(other$deliveryRate)) return false;
        final java.lang.Object this$organizations = this.getOrganizations();
        final java.lang.Object other$organizations = other.getOrganizations();
        if (this$organizations == null ? other$organizations != null : !this$organizations.equals(other$organizations)) return false;
        final java.lang.Object this$validcurrencies = this.getValidcurrencies();
        final java.lang.Object other$validcurrencies = other.getValidcurrencies();
        if (this$validcurrencies == null ? other$validcurrencies != null : !this$validcurrencies.equals(other$validcurrencies)) return false;
        final java.lang.Object this$pledgeslist = this.getPledgeslist();
        final java.lang.Object other$pledgeslist = other.getPledgeslist();
        if (this$pledgeslist == null ? other$pledgeslist != null : !this$pledgeslist.equals(other$pledgeslist)) return false;
        if (this.isDupFunding() != other.isDupFunding()) return false;
        final java.lang.Object this$orgName = this.getOrgName();
        final java.lang.Object other$orgName = other.getOrgName();
        if (this$orgName == null ? other$orgName != null : !this$orgName.equals(other$orgName)) return false;
        final java.lang.Object this$assistanceType = this.getAssistanceType();
        final java.lang.Object other$assistanceType = other.getAssistanceType();
        if (this$assistanceType == null ? other$assistanceType != null : !this$assistanceType.equals(other$assistanceType)) return false;
        final java.lang.Object this$modality = this.getModality();
        final java.lang.Object other$modality = other.getModality();
        if (this$modality == null ? other$modality != null : !this$modality.equals(other$modality)) return false;
        final java.lang.Object this$fundingStatus = this.getFundingStatus();
        final java.lang.Object other$fundingStatus = other.getFundingStatus();
        if (this$fundingStatus == null ? other$fundingStatus != null : !this$fundingStatus.equals(other$fundingStatus)) return false;
        final java.lang.Object this$modeOfPayment = this.getModeOfPayment();
        final java.lang.Object other$modeOfPayment = other.getModeOfPayment();
        if (this$modeOfPayment == null ? other$modeOfPayment != null : !this$modeOfPayment.equals(other$modeOfPayment)) return false;
        final java.lang.Object this$availableMTEFProjectionYears = this.getAvailableMTEFProjectionYears();
        final java.lang.Object other$availableMTEFProjectionYears = other.getAvailableMTEFProjectionYears();
        if (this$availableMTEFProjectionYears == null ? other$availableMTEFProjectionYears != null : !this$availableMTEFProjectionYears.equals(other$availableMTEFProjectionYears)) return false;
        final java.lang.Object this$projections = this.getProjections();
        final java.lang.Object other$projections = other.getProjections();
        if (this$projections == null ? other$projections != null : !this$projections.equals(other$projections)) return false;
        final java.lang.Object this$orgFundingId = this.getOrgFundingId();
        final java.lang.Object other$orgFundingId = other.getOrgFundingId();
        if (this$orgFundingId == null ? other$orgFundingId != null : !this$orgFundingId.equals(other$orgFundingId)) return false;
        final java.lang.Object this$sourceRole = this.getSourceRole();
        final java.lang.Object other$sourceRole = other.getSourceRole();
        if (this$sourceRole == null ? other$sourceRole != null : !this$sourceRole.equals(other$sourceRole)) return false;
        if (this.getNumComm() != other.getNumComm()) return false;
        if (this.getNumDisb() != other.getNumDisb()) return false;
        if (this.getNumExp() != other.getNumExp()) return false;
        if (this.getNumDisbOrder() != other.getNumDisbOrder()) return false;
        if (this.getNumProjections() != other.getNumProjections()) return false;
        final java.lang.Object this$disbOrderId = this.getDisbOrderId();
        final java.lang.Object other$disbOrderId = other.getDisbOrderId();
        if (this$disbOrderId == null ? other$disbOrderId != null : !this$disbOrderId.equals(other$disbOrderId)) return false;
        final java.lang.Object this$signatureDate = this.getSignatureDate();
        final java.lang.Object other$signatureDate = other.getSignatureDate();
        if (this$signatureDate == null ? other$signatureDate != null : !this$signatureDate.equals(other$signatureDate)) return false;
        final java.lang.Object this$reportingDate = this.getReportingDate();
        final java.lang.Object other$reportingDate = other.getReportingDate();
        if (this$reportingDate == null ? other$reportingDate != null : !this$reportingDate.equals(other$reportingDate)) return false;
        final java.lang.Object this$plannedStartDate = this.getPlannedStartDate();
        final java.lang.Object other$plannedStartDate = other.getPlannedStartDate();
        if (this$plannedStartDate == null ? other$plannedStartDate != null : !this$plannedStartDate.equals(other$plannedStartDate)) return false;
        final java.lang.Object this$plannedCompletionDate = this.getPlannedCompletionDate();
        final java.lang.Object other$plannedCompletionDate = other.getPlannedCompletionDate();
        if (this$plannedCompletionDate == null ? other$plannedCompletionDate != null : !this$plannedCompletionDate.equals(other$plannedCompletionDate)) return false;
        final java.lang.Object this$actualStartDate = this.getActualStartDate();
        final java.lang.Object other$actualStartDate = other.getActualStartDate();
        if (this$actualStartDate == null ? other$actualStartDate != null : !this$actualStartDate.equals(other$actualStartDate)) return false;
        final java.lang.Object this$actualCompletionDate = this.getActualCompletionDate();
        final java.lang.Object other$actualCompletionDate = other.getActualCompletionDate();
        if (this$actualCompletionDate == null ? other$actualCompletionDate != null : !this$actualCompletionDate.equals(other$actualCompletionDate)) return false;
        final java.lang.Object this$fundingConditions = this.getFundingConditions();
        final java.lang.Object other$fundingConditions = other.getFundingConditions();
        if (this$fundingConditions == null ? other$fundingConditions != null : !this$fundingConditions.equals(other$fundingConditions)) return false;
        if (this.isFirstSubmit() != other.isFirstSubmit()) return false;
        final java.lang.Object this$event = this.getEvent();
        final java.lang.Object other$event = other.getEvent();
        if (this$event == null ? other$event != null : !this$event.equals(other$event)) return false;
        if (this.isEditFunding() != other.isEditFunding()) return false;
        final java.lang.Object this$fundDonor = this.getFundDonor();
        final java.lang.Object other$fundDonor = other.getFundDonor();
        if (this$fundDonor == null ? other$fundDonor != null : !this$fundDonor.equals(other$fundDonor)) return false;
        final java.lang.Object this$fundingId = this.getFundingId();
        final java.lang.Object other$fundingId = other.getFundingId();
        if (this$fundingId == null ? other$fundingId != null : !this$fundingId.equals(other$fundingId)) return false;
        final java.lang.Object this$fundingRegionId = this.getFundingRegionId();
        final java.lang.Object other$fundingRegionId = other.getFundingRegionId();
        if (this$fundingRegionId == null ? other$fundingRegionId != null : !this$fundingRegionId.equals(other$fundingRegionId)) return false;
        final java.lang.Object this$fundingRegions = this.getFundingRegions();
        final java.lang.Object other$fundingRegions = other.getFundingRegions();
        if (this$fundingRegions == null ? other$fundingRegions != null : !this$fundingRegions.equals(other$fundingRegions)) return false;
        if (!java.util.Arrays.deepEquals(this.getSelRegFundings(), other.getSelRegFundings())) return false;
        final java.lang.Object this$regionalFundings = this.getRegionalFundings();
        final java.lang.Object other$regionalFundings = other.getRegionalFundings();
        if (this$regionalFundings == null ? other$regionalFundings != null : !this$regionalFundings.equals(other$regionalFundings)) return false;
        if (!java.util.Arrays.deepEquals(this.getSelFundingOrgs(), other.getSelFundingOrgs())) return false;
        if (this.getOrgId() != other.getOrgId()) return false;
        if (this.getOffset() != other.getOffset()) return false;
        if (this.getIndexId() != other.getIndexId()) return false;
        if (this.getTransIndexId() != other.getTransIndexId()) return false;
        final java.lang.Object this$fundingCurrCode = this.getFundingCurrCode();
        final java.lang.Object other$fundingCurrCode = other.getFundingCurrCode();
        if (this$fundingCurrCode == null ? other$fundingCurrCode != null : !this$fundingCurrCode.equals(other$fundingCurrCode)) return false;
        if (this.getSelectedMTEFProjectionYear() != other.getSelectedMTEFProjectionYear()) return false;
        if (java.lang.Float.compare(this.getCapitalSpendingPercentage(), other.getCapitalSpendingPercentage()) != 0) return false;
        if (this.isShowActual() != other.isShowActual()) return false;
        if (this.isShowPlanned() != other.isShowPlanned()) return false;
        if (this.isShowPipeline() != other.isShowPipeline()) return false;
        if (this.isShowOfficialDevelopmentAid() != other.isShowOfficialDevelopmentAid()) return false;
        if (this.isShowBilateralSsc() != other.isShowBilateralSsc()) return false;
        if (this.isShowTriangularSsc() != other.isShowTriangularSsc()) return false;
        return true;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean canEqual(final java.lang.Object other) {
        return other instanceof ActivityFundingDigest;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $proProjCost = this.getProProjCost();
        result = result * PRIME + ($proProjCost == null ? 0 : $proProjCost.hashCode());
        final java.lang.Object $proposedAnnualBudgets = this.getProposedAnnualBudgets();
        result = result * PRIME + ($proposedAnnualBudgets == null ? 0 : $proposedAnnualBudgets.hashCode());
        final java.lang.Object $fundingOrganizations = this.getFundingOrganizations();
        result = result * PRIME + ($fundingOrganizations == null ? 0 : $fundingOrganizations.hashCode());
        final java.lang.Object $donorObjective = this.getDonorObjective();
        result = result * PRIME + ($donorObjective == null ? 0 : $donorObjective.hashCode());
        final java.lang.Object $fundingDetails = this.getFundingDetails();
        result = result * PRIME + ($fundingDetails == null ? 0 : $fundingDetails.hashCode());
        final java.lang.Object $totalCommitments = this.getTotalCommitments();
        result = result * PRIME + ($totalCommitments == null ? 0 : $totalCommitments.hashCode());
        final java.lang.Object $totalPlannedCommitments = this.getTotalPlannedCommitments();
        result = result * PRIME + ($totalPlannedCommitments == null ? 0 : $totalPlannedCommitments.hashCode());
        final java.lang.Object $totalPlannedRoF = this.getTotalPlannedRoF();
        result = result * PRIME + ($totalPlannedRoF == null ? 0 : $totalPlannedRoF.hashCode());
        final java.lang.Object $totalPlannedEDD = this.getTotalPlannedEDD();
        result = result * PRIME + ($totalPlannedEDD == null ? 0 : $totalPlannedEDD.hashCode());
        final java.lang.Object $totalActualRoF = this.getTotalActualRoF();
        result = result * PRIME + ($totalActualRoF == null ? 0 : $totalActualRoF.hashCode());
        final java.lang.Object $totalActualEDD = this.getTotalActualEDD();
        result = result * PRIME + ($totalActualEDD == null ? 0 : $totalActualEDD.hashCode());
        final java.lang.Object $totalPipelineCommitments = this.getTotalPipelineCommitments();
        result = result * PRIME + ($totalPipelineCommitments == null ? 0 : $totalPipelineCommitments.hashCode());
        final java.lang.Object $totalOdaSscCommitments = this.getTotalOdaSscCommitments();
        result = result * PRIME + ($totalOdaSscCommitments == null ? 0 : $totalOdaSscCommitments.hashCode());
        final java.lang.Object $totalTriangularSscCommitments = this.getTotalTriangularSscCommitments();
        result = result * PRIME + ($totalTriangularSscCommitments == null ? 0 : $totalTriangularSscCommitments.hashCode());
        final java.lang.Object $totalBilateralSscCommitments = this.getTotalBilateralSscCommitments();
        result = result * PRIME + ($totalBilateralSscCommitments == null ? 0 : $totalBilateralSscCommitments.hashCode());
        final long $totalCommitmentsDouble = java.lang.Double.doubleToLongBits(this.getTotalCommitmentsDouble());
        result = result * PRIME + (int)($totalCommitmentsDouble >>> 32 ^ $totalCommitmentsDouble);
        final java.lang.Object $totalDisbursements = this.getTotalDisbursements();
        result = result * PRIME + ($totalDisbursements == null ? 0 : $totalDisbursements.hashCode());
        final java.lang.Object $totalExpenditures = this.getTotalExpenditures();
        result = result * PRIME + ($totalExpenditures == null ? 0 : $totalExpenditures.hashCode());
        final java.lang.Object $totalPlannedExpenditures = this.getTotalPlannedExpenditures();
        result = result * PRIME + ($totalPlannedExpenditures == null ? 0 : $totalPlannedExpenditures.hashCode());
        final java.lang.Object $totalPlannedDisbursements = this.getTotalPlannedDisbursements();
        result = result * PRIME + ($totalPlannedDisbursements == null ? 0 : $totalPlannedDisbursements.hashCode());
        final java.lang.Object $totalPlannedDisbursementsOrders = this.getTotalPlannedDisbursementsOrders();
        result = result * PRIME + ($totalPlannedDisbursementsOrders == null ? 0 : $totalPlannedDisbursementsOrders.hashCode());
        final java.lang.Object $totalActualDisbursementsOrders = this.getTotalActualDisbursementsOrders();
        result = result * PRIME + ($totalActualDisbursementsOrders == null ? 0 : $totalActualDisbursementsOrders.hashCode());
        final java.lang.Object $unDisbursementsBalance = this.getUnDisbursementsBalance();
        result = result * PRIME + ($unDisbursementsBalance == null ? 0 : $unDisbursementsBalance.hashCode());
        final java.lang.Object $totalMtefProjections = this.getTotalMtefProjections();
        result = result * PRIME + ($totalMtefProjections == null ? 0 : $totalMtefProjections.hashCode());
        result = result * PRIME + (this.isFixerate() ? 79 : 97);
        final long $regionTotalDisb = java.lang.Double.doubleToLongBits(this.getRegionTotalDisb());
        result = result * PRIME + (int)($regionTotalDisb >>> 32 ^ $regionTotalDisb);
        final java.lang.Object $orderedFundingOrganizations = this.getOrderedFundingOrganizations();
        result = result * PRIME + ($orderedFundingOrganizations == null ? 0 : $orderedFundingOrganizations.hashCode());
        final java.lang.Object $financingBreakdown = this.getFinancingBreakdown();
        result = result * PRIME + ($financingBreakdown == null ? 0 : $financingBreakdown.hashCode());
        final java.lang.Object $deliveryRate = this.getDeliveryRate();
        result = result * PRIME + ($deliveryRate == null ? 0 : $deliveryRate.hashCode());
        final java.lang.Object $organizations = this.getOrganizations();
        result = result * PRIME + ($organizations == null ? 0 : $organizations.hashCode());
        final java.lang.Object $validcurrencies = this.getValidcurrencies();
        result = result * PRIME + ($validcurrencies == null ? 0 : $validcurrencies.hashCode());
        final java.lang.Object $pledgeslist = this.getPledgeslist();
        result = result * PRIME + ($pledgeslist == null ? 0 : $pledgeslist.hashCode());
        result = result * PRIME + (this.isDupFunding() ? 79 : 97);
        final java.lang.Object $orgName = this.getOrgName();
        result = result * PRIME + ($orgName == null ? 0 : $orgName.hashCode());
        final java.lang.Object $assistanceType = this.getAssistanceType();
        result = result * PRIME + ($assistanceType == null ? 0 : $assistanceType.hashCode());
        final java.lang.Object $modality = this.getModality();
        result = result * PRIME + ($modality == null ? 0 : $modality.hashCode());
        final java.lang.Object $fundingStatus = this.getFundingStatus();
        result = result * PRIME + ($fundingStatus == null ? 0 : $fundingStatus.hashCode());
        final java.lang.Object $modeOfPayment = this.getModeOfPayment();
        result = result * PRIME + ($modeOfPayment == null ? 0 : $modeOfPayment.hashCode());
        final java.lang.Object $availableMTEFProjectionYears = this.getAvailableMTEFProjectionYears();
        result = result * PRIME + ($availableMTEFProjectionYears == null ? 0 : $availableMTEFProjectionYears.hashCode());
        final java.lang.Object $projections = this.getProjections();
        result = result * PRIME + ($projections == null ? 0 : $projections.hashCode());
        final java.lang.Object $orgFundingId = this.getOrgFundingId();
        result = result * PRIME + ($orgFundingId == null ? 0 : $orgFundingId.hashCode());
        final java.lang.Object $sourceRole = this.getSourceRole();
        result = result * PRIME + ($sourceRole == null ? 0 : $sourceRole.hashCode());
        result = result * PRIME + this.getNumComm();
        result = result * PRIME + this.getNumDisb();
        result = result * PRIME + this.getNumExp();
        result = result * PRIME + this.getNumDisbOrder();
        result = result * PRIME + this.getNumProjections();
        final java.lang.Object $disbOrderId = this.getDisbOrderId();
        result = result * PRIME + ($disbOrderId == null ? 0 : $disbOrderId.hashCode());
        final java.lang.Object $signatureDate = this.getSignatureDate();
        result = result * PRIME + ($signatureDate == null ? 0 : $signatureDate.hashCode());
        final java.lang.Object $reportingDate = this.getReportingDate();
        result = result * PRIME + ($reportingDate == null ? 0 : $reportingDate.hashCode());
        final java.lang.Object $plannedStartDate = this.getPlannedStartDate();
        result = result * PRIME + ($plannedStartDate == null ? 0 : $plannedStartDate.hashCode());
        final java.lang.Object $plannedCompletionDate = this.getPlannedCompletionDate();
        result = result * PRIME + ($plannedCompletionDate == null ? 0 : $plannedCompletionDate.hashCode());
        final java.lang.Object $actualStartDate = this.getActualStartDate();
        result = result * PRIME + ($actualStartDate == null ? 0 : $actualStartDate.hashCode());
        final java.lang.Object $actualCompletionDate = this.getActualCompletionDate();
        result = result * PRIME + ($actualCompletionDate == null ? 0 : $actualCompletionDate.hashCode());
        final java.lang.Object $fundingConditions = this.getFundingConditions();
        result = result * PRIME + ($fundingConditions == null ? 0 : $fundingConditions.hashCode());
        result = result * PRIME + (this.isFirstSubmit() ? 79 : 97);
        final java.lang.Object $event = this.getEvent();
        result = result * PRIME + ($event == null ? 0 : $event.hashCode());
        result = result * PRIME + (this.isEditFunding() ? 79 : 97);
        final java.lang.Object $fundDonor = this.getFundDonor();
        result = result * PRIME + ($fundDonor == null ? 0 : $fundDonor.hashCode());
        final java.lang.Object $fundingId = this.getFundingId();
        result = result * PRIME + ($fundingId == null ? 0 : $fundingId.hashCode());
        final java.lang.Object $fundingRegionId = this.getFundingRegionId();
        result = result * PRIME + ($fundingRegionId == null ? 0 : $fundingRegionId.hashCode());
        final java.lang.Object $fundingRegions = this.getFundingRegions();
        result = result * PRIME + ($fundingRegions == null ? 0 : $fundingRegions.hashCode());
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getSelRegFundings());
        final java.lang.Object $regionalFundings = this.getRegionalFundings();
        result = result * PRIME + ($regionalFundings == null ? 0 : $regionalFundings.hashCode());
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getSelFundingOrgs());
        final long $orgId = this.getOrgId();
        result = result * PRIME + (int)($orgId >>> 32 ^ $orgId);
        result = result * PRIME + this.getOffset();
        result = result * PRIME + this.getIndexId();
        final long $transIndexId = this.getTransIndexId();
        result = result * PRIME + (int)($transIndexId >>> 32 ^ $transIndexId);
        final java.lang.Object $fundingCurrCode = this.getFundingCurrCode();
        result = result * PRIME + ($fundingCurrCode == null ? 0 : $fundingCurrCode.hashCode());
        result = result * PRIME + this.getSelectedMTEFProjectionYear();
        result = result * PRIME + java.lang.Float.floatToIntBits(this.getCapitalSpendingPercentage());
        result = result * PRIME + (this.isShowActual() ? 79 : 97);
        result = result * PRIME + (this.isShowPlanned() ? 79 : 97);
        result = result * PRIME + (this.isShowPipeline() ? 79 : 97);
        result = result * PRIME + (this.isShowOfficialDevelopmentAid() ? 79 : 97);
        result = result * PRIME + (this.isShowBilateralSsc() ? 79 : 97);
        result = result * PRIME + (this.isShowTriangularSsc() ? 79 : 97);
        return result;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "ActivityFundingDigest(proProjCost=" + this.getProProjCost() + ", proposedAnnualBudgets=" + this.getProposedAnnualBudgets() + ", fundingOrganizations=" + this.getFundingOrganizations() + ", donorObjective=" + this.getDonorObjective() + ", fundingDetails=" + this.getFundingDetails() + ", totalCommitments=" + this.getTotalCommitments() + ", totalPlannedCommitments=" + this.getTotalPlannedCommitments() + ", totalPlannedRoF=" + this.getTotalPlannedRoF() + ", totalPlannedEDD=" + this.getTotalPlannedEDD() + ", totalActualRoF=" + this.getTotalActualRoF() + ", totalActualEDD=" + this.getTotalActualEDD() + ", totalPipelineCommitments=" + this.getTotalPipelineCommitments() + ", totalOdaSscCommitments=" + this.getTotalOdaSscCommitments() + ", totalTriangularSscCommitments=" + this.getTotalTriangularSscCommitments() + ", totalBilateralSscCommitments=" + this.getTotalBilateralSscCommitments() + ", totalCommitmentsDouble=" + this.getTotalCommitmentsDouble() + ", totalDisbursements=" + this.getTotalDisbursements() + ", totalExpenditures=" + this.getTotalExpenditures() + ", totalPlannedExpenditures=" + this.getTotalPlannedExpenditures() + ", totalPlannedDisbursements=" + this.getTotalPlannedDisbursements() + ", totalPlannedDisbursementsOrders=" + this.getTotalPlannedDisbursementsOrders() + ", totalActualDisbursementsOrders=" + this.getTotalActualDisbursementsOrders() + ", unDisbursementsBalance=" + this.getUnDisbursementsBalance() + ", totalMtefProjections=" + this.getTotalMtefProjections() + ", fixerate=" + this.isFixerate() + ", regionTotalDisb=" + this.getRegionTotalDisb() + ", orderedFundingOrganizations=" + this.getOrderedFundingOrganizations() + ", financingBreakdown=" + this.getFinancingBreakdown() + ", deliveryRate=" + this.getDeliveryRate() + ", organizations=" + this.getOrganizations() + ", validcurrencies=" + this.getValidcurrencies() + ", pledgeslist=" + this.getPledgeslist() + ", dupFunding=" + this.isDupFunding() + ", orgName=" + this.getOrgName() + ", assistanceType=" + this.getAssistanceType() + ", modality=" + this.getModality() + ", fundingStatus=" + this.getFundingStatus() + ", modeOfPayment=" + this.getModeOfPayment() + ", availableMTEFProjectionYears=" + this.getAvailableMTEFProjectionYears() + ", projections=" + this.getProjections() + ", orgFundingId=" + this.getOrgFundingId() + ", sourceRole=" + this.getSourceRole() + ", numComm=" + this.getNumComm() + ", numDisb=" + this.getNumDisb() + ", numExp=" + this.getNumExp() + ", numDisbOrder=" + this.getNumDisbOrder() + ", numProjections=" + this.getNumProjections() + ", disbOrderId=" + this.getDisbOrderId() + ", signatureDate=" + this.getSignatureDate() + ", reportingDate=" + this.getReportingDate() + ", plannedStartDate=" + this.getPlannedStartDate() + ", plannedCompletionDate=" + this.getPlannedCompletionDate() + ", actualStartDate=" + this.getActualStartDate() + ", actualCompletionDate=" + this.getActualCompletionDate() + ", fundingConditions=" + this.getFundingConditions() + ", firstSubmit=" + this.isFirstSubmit() + ", event=" + this.getEvent() + ", editFunding=" + this.isEditFunding() + ", fundDonor=" + this.getFundDonor() + ", fundingId=" + this.getFundingId() + ", fundingRegionId=" + this.getFundingRegionId() + ", fundingRegions=" + this.getFundingRegions() + ", selRegFundings=" + java.util.Arrays.deepToString(this.getSelRegFundings()) + ", regionalFundings=" + this.getRegionalFundings() + ", selFundingOrgs=" + java.util.Arrays.deepToString(this.getSelFundingOrgs()) + ", orgId=" + this.getOrgId() + ", offset=" + this.getOffset() + ", indexId=" + this.getIndexId() + ", transIndexId=" + this.getTransIndexId() + ", fundingCurrCode=" + this.getFundingCurrCode() + ", selectedMTEFProjectionYear=" + this.getSelectedMTEFProjectionYear() + ", capitalSpendingPercentage=" + this.getCapitalSpendingPercentage() + ", showActual=" + this.isShowActual() + ", showPlanned=" + this.isShowPlanned() + ", showPipeline=" + this.isShowPipeline() + ", showOfficialDevelopmentAid=" + this.isShowOfficialDevelopmentAid() + ", showBilateralSsc=" + this.isShowBilateralSsc() + ", showTriangularSsc=" + this.isShowTriangularSsc() + ")";
    }
}
