<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-18720</jira>
	<keyword>Views</keyword>
	<author>cdolghier</author>
	<description>logging stuff for Component reports ETL</description>
	<apply>
		<script>
			<lang delimiter="@" type="postgres">

CREATE OR REPLACE FUNCTION component_modified_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (NEW.amp_component_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('component', NEW.amp_component_id);
        END IF;
        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE OR REPLACE FUNCTION component_deleted_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (OLD.amp_component_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('component', OLD.amp_component_id);
        END IF;
        RETURN OLD;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE TRIGGER component_modified_trig BEFORE INSERT OR UPDATE ON amp_components
    FOR EACH ROW EXECUTE PROCEDURE component_modified_proc()@@@

CREATE TRIGGER component_deleted_trig BEFORE DELETE ON amp_components
    FOR EACH ROW EXECUTE PROCEDURE component_deleted_proc()@@@



CREATE OR REPLACE FUNCTION component_funding_modified_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (NEW.amp_component_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('component', NEW.amp_component_id);
        END IF;
        IF (NEW.activity_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('activity', NEW.activity_id);
        END IF;
        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE OR REPLACE FUNCTION component_funding_deleted_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (OLD.amp_component_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('component', OLD.amp_component_id);
        END IF;
        IF (OLD.activity_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('activity', OLD.activity_id);
        END IF;
        RETURN OLD;
    END;
$BODY$ LANGUAGE plpgsql@@@


CREATE TRIGGER component_funding_modified_trig BEFORE INSERT OR UPDATE ON amp_component_funding
    FOR EACH ROW EXECUTE PROCEDURE component_funding_modified_proc()@@@

CREATE TRIGGER component_funding_deleted_trig BEFORE DELETE ON amp_component_funding
    FOR EACH ROW EXECUTE PROCEDURE component_funding_deleted_proc()@@@
    
			</lang>
		</script>
	</apply>
</tns:patch>
