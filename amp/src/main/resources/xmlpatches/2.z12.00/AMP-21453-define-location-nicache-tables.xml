<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-21453</jira>
	<keyword>location</keyword>
	<author>cdolghier</author>
	<description>make triggers and caches for locations</description>
	<apply>
		<script>
			<lang delimiter="@" type="postgres">				
  
  				<!-- EXTREMELY IMPORTANT THIS PATCH IS DEPENDENT ON AMP-18110-enable-recreate-views-locations-cache.xml HAVING BEEN PREVIOUSLY RUN SUCCESSFULLY.
  					SOME TRIGGERS ARE NOT REDEFINED HERE, JUST THE FUNCTIONS CALLED BY THEM AND THE VIEWS
  				--> 
	
	
CREATE OR REPLACE FUNCTION public.getlocationdepth(acvlid bigint)
  RETURNS integer AS
$BODY$
 declare
         declare depth int;
         declare sid bigint;
         declare pid bigint;
 begin           
         depth := 0;
         select parent_location into pid from amp_category_value_location  where id=acvlid;
         if pid is null then return depth; 
         end if;
         while pid is not null LOOP
                 depth := depth + 1;
                 sid := pid;
                 select parent_location into pid from amp_category_value_location  where id = sid;
         end loop;
 return depth;
 END;
 $BODY$
  LANGUAGE plpgsql STABLE
  COST 100;
  @@@
  
				CREATE OR REPLACE VIEW v_ni_all_locations_with_levels AS
					SELECT amp_location_id, acvl_id, acvl_name, parent_location, getlocationdepth(acvl_id) AS location_depth,
						COALESCE(country_id, - acvl_id) AS country_id, COALESCE(country_name, 'Undefined') AS country_name,
						COALESCE(region_id, - acvl_id) AS region_id, COALESCE(region_name, 'Undefined') AS region_name,
						COALESCE(zone_id, - acvl_id) AS zone_id, COALESCE(zone_name, 'Undefined') AS zone_name,
						COALESCE(district_id, - acvl_id) AS district_id, COALESCE(district_name, 'Undefined') AS district_name
					FROM v_amp_location_cache@@@
					 
				DROP TABLE IF EXISTS ni_all_locations_with_levels@@@
				CREATE TABLE ni_all_locations_with_levels AS 
					SELECT * FROM v_ni_all_locations_with_levels@@@
				
				CREATE INDEX ni_alwl_loc_id ON ni_all_locations_with_levels(amp_location_id)@@@
				CREATE INDEX ni_alwl_acvl_id ON ni_all_locations_with_levels(acvl_id)@@@
				CREATE INDEX ni_alwl_parent_id ON ni_all_locations_with_levels(parent_location)@@@
				CREATE INDEX ni_alwl_depth ON ni_all_locations_with_levels(location_depth)@@@
				CREATE INDEX ni_alwl_country_id ON ni_all_locations_with_levels(country_id)@@@
				CREATE INDEX ni_alwl_region_id ON ni_all_locations_with_levels(region_id)@@@
				CREATE INDEX ni_alwl_zone_id ON ni_all_locations_with_levels(zone_id)@@@
				CREATE INDEX ni_alwl_district_id ON ni_all_locations_with_levels(district_id)@@@
				
CREATE OR REPLACE FUNCTION update_location_level_caches_internal()
 	RETURNS bigint AS
	$BODY$
		BEGIN
			TRUNCATE amp_location_cache;
			INSERT INTO amp_location_cache
				SELECT * FROM v_amp_location_cache;
				
			TRUNCATE ni_all_locations_with_levels;
			INSERT INTO ni_all_locations_with_levels
				SELECT * FROM v_ni_all_locations_with_levels;
				
			RETURN 1;
			end;
		$BODY$
LANGUAGE plpgsql VOLATILE; @@@
				

		CREATE TEMPORARY TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY_1 AS SELECT update_location_level_caches_internal() FROM (select 1) AS dual @@@
		DROP TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY_1 @@@
			
		UPDATE amp_global_settings SET settingsvalue = 'true' WHERE settingsname='Recreate the views on the next server restart' @@@	
			</lang>
		</script>
	</apply>
</tns:patch>
