<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
           xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../../doc/xmlpatcher.xsd ">
    <jira>AMP-25574</jira>
    <keyword>Adding triggers to record possible values lists changes into amp_offline_changelog.</keyword>
    <author>ociubotaru</author>
    <apply>
        <script>
            <lang delimiter="@@@" type="postgres">

                CREATE OR REPLACE FUNCTION update_offline_changelog()
                RETURNS TRIGGER AS
                $BODY$
                DECLARE
                    v_operation_name VARCHAR;
                    v_entity_name VARCHAR;
                    v_entity_id VARCHAR := NULL;
                    v_row RECORD;
                BEGIN
                    IF TG_OP='DELETE' THEN
                        v_operation_name = 'deleted';
                        v_row = OLD;
                    ELSE
                        v_operation_name = 'updated';
                        v_row = NEW;
                    END IF;

                    IF (TG_TABLE_NAME = 'amp_global_settings') THEN
                        v_entity_name := 'global settings';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_team') THEN
                        v_entity_name := 'workspaces';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_category_value') THEN
                        v_entity_name := 'category value';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_location') THEN
                        v_entity_name := 'location';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_category_value_location') THEN
                        v_entity_name := 'category value location';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_sector') THEN
                        v_entity_name := 'sector';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_theme') THEN
                        v_entity_name := 'theme';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_organisation') THEN
                        v_entity_name := 'organisation';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_role') THEN
                        v_entity_name := 'role';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_currency') THEN
                        v_entity_name := 'currency';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_contact') THEN
                        v_entity_name := 'contact';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_program_settings') THEN
                        v_entity_name := 'activity program settings';
                        v_operation_name := 'updated';
                    ELSIF (TG_TABLE_NAME = 'amp_team_member') THEN
                        v_entity_name := 'workspace member';
                        v_entity_id := v_row.amp_team_mem_id;
                    ELSIF (TG_TABLE_NAME = 'dg_message') THEN
                        v_entity_name := 'translation';
                        v_entity_id := v_row.message_key;
                    END IF;

                    IF v_entity_id IS NULL THEN
                        UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id IS NULL;
                    ELSE
                        UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id=v_entity_id;
                    END IF;
                    IF NOT FOUND THEN
                        INSERT INTO amp_offline_changelog(entity_name, entity_id, operation_name, operation_time) VALUES(v_entity_name, v_entity_id, v_operation_name, now());
                    END IF;

                    RETURN NULL;
                END;
                $BODY$
                LANGUAGE plpgsql VOLATILE; @@@

                CREATE TRIGGER cv_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_category_value FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER l_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_location FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER s_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_sector FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER t_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_theme FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER o_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_organisation FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER r_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_role FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER c_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_currency FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER ct_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_contact FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER ps_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_program_settings FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@
                CREATE TRIGGER cvl_update_offline_changelog_trg AFTER INSERT OR UPDATE OR DELETE ON amp_category_value_location FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog(); @@@

            </lang>
        </script>
    </apply>
</tns:patch>