{"version":3,"file":"25.bundle.js","mappings":"iLAKA,MAAMA,EAAmB,IAAAC,OAAOC,EAAAA,IAkEhC,EAhEoBC,KAChB,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MAC7BC,GAAWC,EAAAA,EAAAA,eACXC,GAAWC,EAAAA,EAAAA,gBAGjBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAqCC,IACvC,MAAMC,EAAYD,EAA8BE,OAC1CC,EAAW,GAAAd,OAAMD,GAAmBC,OAAGY,GAEzCE,IAAgBT,EAASO,UAG7BL,EAASO,EAAY,EAIzB,OAFAC,OAAOC,iBAAiB,0BAA2BN,GAE5C,KACHK,OAAOE,oBACH,0BACAP,EACH,CACJ,GACF,CAACL,KAGJI,EAAAA,EAAAA,YAAU,KACN,GAAIJ,EAASO,SAASM,WAAWnB,GAAsB,CACnD,MAAMoB,EAAiB,IAAIC,YAAY,wBAAyB,CAC5DP,OAAQR,EAASO,SAASS,QAAQtB,EAAqB,MAG3DgB,OAAOO,cAAcH,EACzB,IACD,CAACd,IAEJ,MAAMkB,GAAgBnB,EAAAA,EAAAA,SAAO,GACvBoB,GAAapB,EAAAA,EAAAA,SAAO,SAsB1B,OApBAK,EAAAA,EAAAA,YACI,KACSc,EAAcE,UAGnBD,EAAWC,SAAUC,EAAAA,EAAAA,OAAM,CACvBC,WAAaxB,EAAIsB,QACjBG,gBAAiBvB,EAASO,SAASS,QAC/BtB,EACA,IAEJ8B,YAAY,IAEhBN,EAAcE,SAAU,EAAK,GAEjC,CAACpB,KAGLI,EAAAA,EAAAA,YAAU,IAAMe,EAAWC,SAAS,KAGhCK,EAAAA,EAAAA,KAAA,OAAK3B,IAAKA,EAAK4B,GAAG,uBAAwB,C","sources":["components/UserManager.tsx"],"sourcesContent":["import React, { useEffect, useRef} from 'react';\nimport {mount} from \"userManager/UserManagerApp\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {USER_MANAGER_APP_NAME} from \"../utils/constants\";\n\nconst userManagerBasename = `/${USER_MANAGER_APP_NAME}`;\n\nconst UserManager = () => {\n    const ref = useRef<HTMLDivElement>(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    // Listen to navigation events dispatched inside UserManager mfe.\n    useEffect(() => {\n        const userManagerNavigationEventHandler = (event: Event) => {\n            const pathname = (event as CustomEvent<string>).detail;\n            const newPathname = `${userManagerBasename}${pathname}`;\n\n            if (newPathname === location.pathname) {\n                return;\n            }\n            navigate(newPathname);\n        };\n        window.addEventListener(\"[UserManager] navigated\", userManagerNavigationEventHandler);\n\n        return () => {\n            window.removeEventListener(\n                \"[UserManager] navigated\",\n                userManagerNavigationEventHandler\n            );\n        };\n    }, [location]);\n\n    // Listen for container location changes and dispatch a notification.\n    useEffect(() => {\n        if (location.pathname.startsWith(userManagerBasename)) {\n            const containerEvent = new CustomEvent(\"[container] navigated\", {\n                detail: location.pathname.replace(userManagerBasename, \"\"),\n            });\n\n            window.dispatchEvent(containerEvent);\n        }\n    }, [location]);\n\n    const isFirstRunRef = useRef(true);\n    const unmountRef = useRef(() => {});\n    // Mount UserManager MFE\n    useEffect(\n        () => {\n            if (!isFirstRunRef.current) {\n                return;\n            }\n            unmountRef.current = mount({\n                mountPoint : ref.current!,\n                initialPathName: location.pathname.replace(\n                    userManagerBasename,\n                    ''\n                ),\n                standalone: false,\n            });\n            isFirstRunRef.current = false;\n        },\n        [location],\n    );\n\n    useEffect(() => unmountRef.current, []);\n\n    return (\n        <div ref={ref} id=\"userManager-app-mfe\" />\n    );\n}\nexport default UserManager;\n"],"names":["userManagerBasename","concat","USER_MANAGER_APP_NAME","UserManager","ref","useRef","location","useLocation","navigate","useNavigate","useEffect","userManagerNavigationEventHandler","event","pathname","detail","newPathname","window","addEventListener","removeEventListener","startsWith","containerEvent","CustomEvent","replace","dispatchEvent","isFirstRunRef","unmountRef","current","mount","mountPoint","initialPathName","standalone","_jsx","id"],"sourceRoot":""}