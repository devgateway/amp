{"version":3,"file":"32.bundle.js","mappings":"iLAKA,MAAMA,EAAe,IAAAC,OAAOC,EAAAA,IAwE5B,EAtEgBC,KACZ,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MAC7BC,GAAWC,EAAAA,EAAAA,eACXC,GAAWC,EAAAA,EAAAA,gBAIjBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAiCC,IACnC,MAAMC,EAAYD,EAA8BE,OAC1CC,EAAW,GAAAd,OAAMD,GAAeC,OAAGY,GAErCE,IAAgBT,EAASO,UAI7BL,EAASO,EAAY,EAIzB,OAFAC,OAAOC,iBAAiB,sBAAuBN,GAExC,KACHK,OAAOE,oBACH,sBACAP,EACH,CACJ,GACF,CAACL,KAGJI,EAAAA,EAAAA,YAAU,KACN,GAAIJ,EAASO,SAASM,WAAWnB,GAAkB,CAC/CoB,aAAaC,QAAQ,cAAef,EAASO,UAC7C,MAAMS,EAAiB,IAAIC,YAAY,wBAAyB,CAC5DT,OAAQ,CACJD,SAAUP,EAASO,SAASW,QAAQxB,EAAiB,IACrDyB,OAAQnB,EAASmB,UAGzBL,aAAaC,QAAQ,eAAgBf,EAASmB,QAC9CT,OAAOU,cAAcJ,EACzB,IACD,CAAChB,IAEJ,MAAMqB,GAAgBtB,EAAAA,EAAAA,SAAO,GACvBuB,GAAavB,EAAAA,EAAAA,SAAO,SAsB1B,OApBAK,EAAAA,EAAAA,YACI,KACSiB,EAAcE,UAGnBD,EAAWC,SAAUC,EAAAA,EAAAA,OAAM,CACvBC,WAAa3B,EAAIyB,QACjBG,gBAAiB1B,EAASO,SAASW,QAC/BxB,EACA,IAEJiC,YAAY,IAEhBN,EAAcE,SAAU,EAAK,GAEjC,CAACvB,KAGLI,EAAAA,EAAAA,YAAU,IAAMkB,EAAWC,SAAS,KAGhCK,EAAAA,EAAAA,KAAA,OAAK9B,IAAKA,EAAK+B,GAAG,mBAAoB,C","sources":["components/Reampv2.tsx"],"sourcesContent":["import React, { useEffect, useRef} from 'react';\nimport {mount} from \"reampv2App/Reampv2App\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {REAMPV2_APP_NAME} from \"../utils/constants\";\n\nconst reampv2Basename = `/${REAMPV2_APP_NAME}`;\n\nconst Reampv2 = () => {\n    const ref = useRef<HTMLDivElement>(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n\n    // Listen to navigation events dispatched inside reampv2 mfe.\n    useEffect(() => {\n        const reampv2NavigationEventHandler = (event: Event) => {\n            const pathname = (event as CustomEvent<string>).detail;\n            const newPathname = `${reampv2Basename}${pathname}`;\n\n            if (newPathname === location.pathname) {\n                return;\n            }\n            // localStorage.setItem(\"searchParams\", location.search);\n            navigate(newPathname);\n        };\n        window.addEventListener(\"[reampv2] navigated\", reampv2NavigationEventHandler);\n\n        return () => {\n            window.removeEventListener(\n                \"[reampv2] navigated\",\n                reampv2NavigationEventHandler\n            );\n        };\n    }, [location]);\n\n    // Listen for container location changes and dispatch a notification.\n    useEffect(() => {\n        if (location.pathname.startsWith(reampv2Basename)) {\n            localStorage.setItem('currentPath', location.pathname);\n            const containerEvent = new CustomEvent(\"[container] navigated\", {\n                detail: {\n                    pathname: location.pathname.replace(reampv2Basename, ''),\n                    search: location.search,\n                }\n            });\n            localStorage.setItem(\"searchParams\", location.search);\n            window.dispatchEvent(containerEvent);\n        }\n    }, [location]);\n\n    const isFirstRunRef = useRef(true);\n    const unmountRef = useRef(() => {});\n    // Mount reampv2 MFE\n    useEffect(\n        () => {\n            if (!isFirstRunRef.current) {\n                return;\n            }\n            unmountRef.current = mount({\n                mountPoint : ref.current!,\n                initialPathName: location.pathname.replace(\n                    reampv2Basename,\n                    ''\n                ),\n                standalone: false\n            });\n            isFirstRunRef.current = false;\n        },\n        [location],\n    );\n\n    useEffect(() => unmountRef.current, []);\n\n    return (\n        <div ref={ref} id=\"reampv2-app-mfe\" />\n    );\n}\nexport default Reampv2\n"],"names":["reampv2Basename","concat","REAMPV2_APP_NAME","Reampv2","ref","useRef","location","useLocation","navigate","useNavigate","useEffect","reampv2NavigationEventHandler","event","pathname","detail","newPathname","window","addEventListener","removeEventListener","startsWith","localStorage","setItem","containerEvent","CustomEvent","replace","search","dispatchEvent","isFirstRunRef","unmountRef","current","mount","mountPoint","initialPathName","standalone","_jsx","id"],"sourceRoot":""}