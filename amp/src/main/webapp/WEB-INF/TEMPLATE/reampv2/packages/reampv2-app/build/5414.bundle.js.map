{"version":3,"file":"5414.bundle.js","mappings":"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","sources":["NavigationManager.jsx","routing/routes.js","App.js","routing/index.js","serviceWorker.js","bootstrap.js","utils/Constants.js"],"sourcesContent":["import React, {useEffect} from 'react'\nimport { matchRoutes, useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\nimport routes from \"./routing/routes\";\n\nconst NavigationManager = ({ children }) => {\n    const location = useLocation();\n    const [ searchParams] = useSearchParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        function containerNavigationHandler(event) {\n            const pathname = event.detail.pathname;\n            if (location.pathname === pathname || !matchRoutes(routes, { pathname })) {\n                return;\n            }\n\n            const searchParamsString = searchParams.toString();\n            navigate({\n                pathname,\n                search: searchParamsString ? `?${searchParamsString}` : \"\",\n            });\n        }\n\n        window.addEventListener(\"[container] navigated\", containerNavigationHandler);\n\n        return () => {\n            window.removeEventListener(\"[container] navigated\", containerNavigationHandler);\n        };\n    }, [location]);\n\n    useEffect(() => {\n        const reampv2Event = new CustomEvent(\"[reampv2] navigated\", { detail: location.pathname })\n        window.dispatchEvent(reampv2Event);\n\n    }, [location]);\n\n    return children;\n}\nexport default NavigationManager;\n","import {lazy, Suspense} from \"react\";\nimport NavigationManager from \"../NavigationManager\";\nimport { Outlet } from \"react-router-dom\";\n\nconst SSCDashboardApp = lazy(() => import('../modules/sscdashboard'));\nconst AdminApps = lazy(() => import('../modules/admin/Admin.routes'));\nconst NDDDashboardApp = lazy(() => import('../modules/ndddashboard'));\nconst GeocoderApp = lazy(() => import('../modules/geocoder'));\nconst AmpOfflineApp = lazy(() => import('../modules/ampoffline/Download'));\nconst ReportGeneratorApp = lazy(() => import('../modules/report_generator'));\n\n/** @type {import('react-router-dom').RouteObject[]} */\nconst routes = [\n    {\n        path: \"/\",\n        element: (\n            <NavigationManager>\n                <Outlet />\n            </NavigationManager>\n        ),\n        children: [\n            {\n                path: \"/ssc/*\",\n                index: true,\n                element: (\n                        <Suspense fallback={<div>Loading...</div>}>\n                            <SSCDashboardApp />\n                        </Suspense>\n                )\n            },\n            {\n                path: \"ampoffline\",\n                element: (\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <AmpOfflineApp />\n                    </Suspense>\n                )\n            },\n            {\n                path: \"ndddashboard/*\",\n                element: (\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <NDDDashboardApp />\n                    </Suspense>\n                )\n            },\n            {\n                path: \"report_generator/*\",\n                element: (\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <ReportGeneratorApp />\n                    </Suspense>\n                )\n            },\n            {\n                path: \"geocoder\",\n                element: (\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <GeocoderApp />\n                    </Suspense>\n                )\n            },\n            {\n                path: \"admin/*\",\n                element: (\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <AdminApps />\n                    </Suspense>\n                )\n            }\n        ]\n    }\n]\n\nexport default routes;\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {RouterProvider} from \"react-router-dom\";\nimport {createRouter} from \"./routing\";\n\nconst App = ({ routingStrategy, initialPathName }) => {\n    const router = createRouter({ routingStrategy, initialPathName });\n    return (\n        <RouterProvider router={router} />\n    );\n}\n\nexport default App;\n","import { createBrowserRouter, createMemoryRouter } from \"react-router-dom\";\nimport {RoutingStrategies} from \"../utils/Constants\";\nimport routes from \"./routes\";\n\nexport const createRouter = ({ routingStrategy, initialPathName }) => {\n    if (routingStrategy === RoutingStrategies.BROWSER) {\n        return createBrowserRouter(routes);\n    }\n\n    const initialEntries = [initialPathName]\n    return createMemoryRouter(routes, { initialEntries });\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@devgateway/amp-filter/dist/amp-filter.css';\nconst boilerplate = require('@devgateway/amp-boilerplate/dist/amp-boilerplate');\n\nconst Root = ({ routingStrategy, initialPathName }) => {\n    return (\n        <React.StrictMode>\n            <App routingStrategy={routingStrategy} initialPathName={initialPathName}/>\n        </React.StrictMode>\n    )\n};\n\nexport const mount = ({ mountPoint, routingStrategy , initialPathName = '/', standalone = true}) => {\n    if (mountPoint) {\n        ReactDOM.render(<Root routingStrategy={routingStrategy} initialPathName={initialPathName}/>, mountPoint);\n    }\n\n    if (standalone) {\n        function getParameterByName(name, url = window.location.href) {\n            name = name.replace(/[[\\]]/g, '\\\\$&');\n            const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`);\n            const results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return '';\n            return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n        }\n\n\n        if (!getParameterByName('embedded')) {\n            new boilerplate.layout({});\n        }\n    }\n\n    serviceWorker.register();\n    //unmount the app if it is not in use\n    return () => {\n        if (!mountPoint) {\n            ReactDOM.unmountComponentAtNode(mountPoint);\n        }\n    }\n}\n","export const DEVELOPMENT = 'development';\n\nexport const RoutingStrategies = Object.freeze({\n    BROWSER: 'browser',\n    MEMORY: 'memory'\n})\n"],"names":["_ref","children","location","useLocation","_useSearchParams","useSearchParams","searchParams","_slicedToArray","navigate","useNavigate","useEffect","containerNavigationHandler","event","pathname","detail","matchRoutes","routes","searchParamsString","toString","search","concat","window","addEventListener","removeEventListener","reampv2Event","CustomEvent","dispatchEvent","SSCDashboardApp","lazy","AdminApps","NDDDashboardApp","GeocoderApp","AmpOfflineApp","ReportGeneratorApp","path","element","_jsx","NavigationManager","Outlet","index","Suspense","fallback","router","routingStrategy","initialPathName","RoutingStrategies","BROWSER","createBrowserRouter","initialEntries","createMemoryRouter","createRouter","RouterProvider","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","boilerplate","require","Root","React","App","mount","_ref2","mountPoint","_ref2$initialPathName","_ref2$standalone","standalone","ReactDOM","getParameterByName","name","url","arguments","length","undefined","replace","results","RegExp","exec","decodeURIComponent","layout","DEVELOPMENT","Object","freeze","MEMORY"],"sourceRoot":""}