{"version":3,"file":"9654.bundle.js","mappings":"wRAAA,IAAIA,EACF,mECAEC,EAAS,SAAAC,GAAK,OAAIC,OAAOC,gBAAgB,IAAIC,WAAWH,GAAO,EAC/DI,EAAe,SAACC,EAAUC,EAAaC,GACzC,IAAIC,GAAQ,GAAMC,KAAKC,IAAIL,EAASM,OAAS,GAAKF,KAAKG,KAAQ,EAC3DC,KAAW,IAAML,EAAOF,EAAeD,EAASM,QACpD,OAAO,WAEL,IAF6B,IAAvBG,EAAIC,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,GAAAA,UAAA,GAAGT,EACTW,EAAK,KAIP,IAFA,IAAIjB,EAAQO,EAAUM,GAClBK,EAAIL,EACDK,KAEL,IADAD,GAAMZ,EAASL,EAAMkB,GAAKV,IAAS,IAC5BG,SAAWG,EAAM,OAAOG,CAGrC,CACF,EACIE,EAAiB,SAACd,GAAmB,OACvCD,EAAaC,EADqBU,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACRhB,EAAO,EAClCqB,EAAS,WAAH,IAAIN,EAAIC,UAAAJ,OAAA,QAAAK,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OACrBd,OAAOC,gBAAgB,IAAIC,WAAWW,IAAOO,QAAO,SAACJ,EAAIK,GAWvD,OAREL,IAFFK,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["../../../node_modules/nanoid/url-alphabet/index.js","../../../node_modules/nanoid/index.browser.js"],"sourcesContent":["let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","arguments","undefined","id","j","customAlphabet","nanoid","reduce","byte","toString","toUpperCase"],"sourceRoot":""}