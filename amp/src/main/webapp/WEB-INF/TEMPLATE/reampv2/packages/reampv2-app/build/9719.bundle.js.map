{"version":3,"file":"9719.bundle.js","mappings":"0WAWMA,EAAmB,CACvBC,WAAY,8BACZC,YAAa,+BACbC,QAAS,2BACTC,SAAU,6BA4CZ,UAzCgB,SAACC,G,QACTC,EAAAC,EAAAA,SAAAC,SAAAC,cAAA,QAACC,EAAAJ,EAAA,GAAYK,EAAAL,EAAA,GACbM,EAAkBP,EAAMQ,UAAYb,EAAiBK,EAAMQ,WAAcb,EAAiBI,SAC1FU,EAAsBP,EAAAA,YACtBQ,GAAMC,EAAAA,EAAAA,UAEZT,EAAAA,WAAgB,WACsB,OAAhCO,EAAoBG,UACtBC,EAAAA,SAAWC,wBAAwBL,EAAoBG,SACvDC,EAAAA,SAAWE,yBAAyBN,EAAoBG,SAE5D,GAAG,CAACH,IAEJP,EAAAA,WAAgB,WACd,IACMc,EADeN,EAAIO,eACMC,uBAAuBX,GACtDD,EAAcU,EAAU,GAC1B,GAAG,CAACT,IAEJL,EAAAA,WAAgB,WACK,OAAfG,SACoBc,IAAlBnB,EAAMoB,UAA2C,IAAlBpB,EAAMoB,QACvCf,EAAWe,QAAQX,EAAoBG,SAEvCP,EAAWgB,OAAOZ,EAAoBG,SAG5C,GAAG,CAACP,EAAYL,EAAMoB,QAASX,IAE/B,IAAMa,IAAuC,QAA1BC,EAAe,QAAfC,EAAAxB,EAAMyB,iBAAS,IAAAD,OAAA,EAAAA,EAAEF,iBAAS,IAAAC,OAAA,EAAAA,EAAEG,OAAO,OAAQ,IAAM,kBACpE,OACExB,EAAAA,cAAA,MAAAyB,EAAA,GACM3B,EAAMyB,UAAS,CACnBG,IAAKnB,EACLa,UAAWA,IAEVtB,EAAM6B,SAGb,C","sources":["../node_modules/react-leaflet-custom-control/src/Control.tsx"],"sourcesContent":["import L from 'leaflet'\nimport React from 'react'\nimport { useMap } from 'react-leaflet'\n\ninterface Props {\n  position: L.ControlPosition\n  children?: React.ReactNode\n  container?: React.HTMLAttributes<HTMLDivElement>\n  prepend?: boolean\n}\n\nconst POSITION_CLASSES = {\n  bottomleft: 'leaflet-bottom leaflet-left',\n  bottomright: 'leaflet-bottom leaflet-right',\n  topleft: 'leaflet-top leaflet-left',\n  topright: 'leaflet-top leaflet-right',\n}\n\nconst Control = (props: Props): JSX.Element => {\n  const [portalRoot, setPortalRoot] = React.useState<any>(document.createElement('div'))\n  const positionClass = ((props.position && POSITION_CLASSES[props.position]) || POSITION_CLASSES.topright)\n  const controlContainerRef = React.createRef<HTMLDivElement>()\n  const map = useMap()\n\n  /**\n   * Whenever the control container ref is created, \n   * Ensure the click / scroll propagation is removed\n   * This way click/scroll events do not bubble down to the map\n   */\n  React.useEffect(() => {\n    if (controlContainerRef.current !== null) {\n      L.DomEvent.disableClickPropagation(controlContainerRef.current)\n      L.DomEvent.disableScrollPropagation(controlContainerRef.current)\n    }\n  }, [controlContainerRef])\n\n  /**\n   * Whenever the position is changed, go ahead and get the container of the map and the first\n   * instance of the position class in that map container\n   * Fixes #17\n   */\n  React.useEffect(() => {\n    const mapContainer = map.getContainer()\n    const targetDiv = mapContainer.getElementsByClassName(positionClass)\n    setPortalRoot(targetDiv[0])\n  }, [positionClass])\n\n  /**\n   * Whenever the portal root is complete,\n   * append or prepend the control container to the portal root\n   */\n  React.useEffect(() => {\n    if (portalRoot !== null) {\n      if (props.prepend !== undefined && props.prepend === true) {\n        portalRoot.prepend(controlContainerRef.current)\n      } else {\n        portalRoot.append(controlContainerRef.current)\n      }\n    }\n  }, [portalRoot, props.prepend, controlContainerRef])\n\n  /**\n   * Concatenate the props.container className to the class of the control div\n   */\n  const className = (props.container?.className?.concat(' ') || '') + 'leaflet-control'\n\n  /**\n   * Render\n   */\n  return (\n    <div\n      {...props.container}\n      ref={controlContainerRef}\n      className={className}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default Control"],"names":["POSITION_CLASSES","bottomleft","bottomright","topleft","topright","props","_c","React","document","createElement","portalRoot","setPortalRoot","positionClass","position","controlContainerRef","map","useMap","current","L","disableClickPropagation","disableScrollPropagation","targetDiv","getContainer","getElementsByClassName","undefined","prepend","append","className","_b","_a","container","concat","__assign","ref","children"],"sourceRoot":""}