(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-lifecycles-compat')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-lifecycles-compat'], factory) :
    (global = global || self, factory(global.nivo = global.nivo || {}, global.React, global['react-lifecycles-compat']));
}(this, (function (exports, react, reactLifecyclesCompat) { 'use strict';

    var getDisplayName = function getDisplayName(component) {
      if (typeof component === 'string') {
        return component;
      }

      if (!component) {
        return undefined;
      }

      return component.displayName || component.name || 'Component';
    };

    var setStatic = function setStatic(key, value) {
      return function (BaseComponent) {
        BaseComponent[key] = value;
        return BaseComponent;
      };
    };

    var setDisplayName = function setDisplayName(displayName) {
      return setStatic('displayName', displayName);
    };

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      }

      return x !== x && y !== y;
    }

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }

      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }
      return _typeof(obj);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
      return "".concat(hocName, "(").concat(getDisplayName(BaseComponent), ")");
    };

    var shouldUpdate = function shouldUpdate(test) {
      return function (BaseComponent) {
        var factory = react.createFactory(BaseComponent);

        var ShouldUpdate = function (_Component) {
          _inherits(ShouldUpdate, _Component);

          var _super = _createSuper(ShouldUpdate);

          function ShouldUpdate() {
            _classCallCheck(this, ShouldUpdate);

            return _super.apply(this, arguments);
          }

          _createClass(ShouldUpdate, [{
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
              return test(this.props, nextProps);
            }
          }, {
            key: "render",
            value: function render() {
              return factory(this.props);
            }
          }]);

          return ShouldUpdate;
        }(react.Component);

        if (process.env.NODE_ENV !== 'production') {
          return setDisplayName(wrapDisplayName(BaseComponent, 'shouldUpdate'))(ShouldUpdate);
        }

        return ShouldUpdate;
      };
    };

    var pure = function pure(component) {
      var hoc = shouldUpdate(function (props, nextProps) {
        return !shallowEqual(props, nextProps);
      });

      if (process.env.NODE_ENV !== 'production') {
        return setDisplayName(wrapDisplayName(component, 'pure'))(hoc(component));
      }

      return hoc(component);
    };

    var compose = function compose() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      return funcs.reduce(function (a, b) {
        return function () {
          return a(b.apply(void 0, arguments));
        };
      }, function (arg) {
        return arg;
      });
    };

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }

    var pick = function pick(obj, keys) {
      var result = {};

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (obj.hasOwnProperty(key)) {
          result[key] = obj[key];
        }
      }

      return result;
    };

    var withPropsOnChange = function withPropsOnChange(shouldMapOrKeys, propsMapper) {
      return function (BaseComponent) {
        var factory = react.createFactory(BaseComponent);
        var shouldMap = typeof shouldMapOrKeys === 'function' ? shouldMapOrKeys : function (props, nextProps) {
          return !shallowEqual(pick(props, shouldMapOrKeys), pick(nextProps, shouldMapOrKeys));
        };

        var WithPropsOnChange = function (_Component) {
          _inherits(WithPropsOnChange, _Component);

          var _super = _createSuper(WithPropsOnChange);

          function WithPropsOnChange() {
            var _this;

            _classCallCheck(this, WithPropsOnChange);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));
            _this.state = {
              computedProps: propsMapper(_this.props),
              prevProps: _this.props
            };
            return _this;
          }

          _createClass(WithPropsOnChange, [{
            key: "render",
            value: function render() {
              return factory(_objectSpread2(_objectSpread2({}, this.props), this.state.computedProps));
            }
          }], [{
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, prevState) {
              if (shouldMap(prevState.prevProps, nextProps)) {
                return {
                  computedProps: propsMapper(nextProps),
                  prevProps: nextProps
                };
              }

              return {
                prevProps: nextProps
              };
            }
          }]);

          return WithPropsOnChange;
        }(react.Component);

        reactLifecyclesCompat.polyfill(WithPropsOnChange);

        if (process.env.NODE_ENV !== 'production') {
          return setDisplayName(wrapDisplayName(BaseComponent, 'withPropsOnChange'))(WithPropsOnChange);
        }

        return WithPropsOnChange;
      };
    };

    var defaultProps = function defaultProps(props) {
      return function (BaseComponent) {
        var factory = react.createFactory(BaseComponent);

        var DefaultProps = function DefaultProps(ownerProps) {
          return factory(ownerProps);
        };

        DefaultProps.defaultProps = props;

        if (process.env.NODE_ENV !== 'production') {
          return setDisplayName(wrapDisplayName(BaseComponent, 'defaultProps'))(DefaultProps);
        }

        return DefaultProps;
      };
    };

    var mapProps = function mapProps(propsMapper) {
      return function (BaseComponent) {
        var factory = react.createFactory(BaseComponent);

        var MapProps = function MapProps(props) {
          return factory(propsMapper(props));
        };

        if (process.env.NODE_ENV !== 'production') {
          return setDisplayName(wrapDisplayName(BaseComponent, 'mapProps'))(MapProps);
        }

        return MapProps;
      };
    };

    var withProps = function withProps(createProps) {
      var hoc = mapProps(function (props) {
        return _objectSpread2(_objectSpread2({}, props), typeof createProps === 'function' ? createProps(props) : createProps);
      });

      if (process.env.NODE_ENV !== 'production') {
        return function (BaseComponent) {
          return setDisplayName(wrapDisplayName(BaseComponent, 'withProps'))(hoc(BaseComponent));
        };
      }

      return hoc;
    };

    var setPropTypes = function setPropTypes(propTypes) {
      return setStatic('propTypes', propTypes);
    };

    var withState = function withState(stateName, stateUpdaterName, initialState) {
      return function (BaseComponent) {
        var factory = react.createFactory(BaseComponent);

        var WithState = function (_Component) {
          _inherits(WithState, _Component);

          var _super = _createSuper(WithState);

          function WithState() {
            var _this;

            _classCallCheck(this, WithState);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));
            _this.state = {
              stateValue: typeof initialState === 'function' ? initialState(_this.props) : initialState
            };

            _this.updateStateValue = function (updateFn, callback) {
              return _this.setState(function (_ref) {
                var stateValue = _ref.stateValue;
                return {
                  stateValue: typeof updateFn === 'function' ? updateFn(stateValue) : updateFn
                };
              }, callback);
            };

            return _this;
          }

          _createClass(WithState, [{
            key: "render",
            value: function render() {
              var _objectSpread2$1;

              return factory(_objectSpread2(_objectSpread2({}, this.props), {}, (_objectSpread2$1 = {}, _defineProperty(_objectSpread2$1, stateName, this.state.stateValue), _defineProperty(_objectSpread2$1, stateUpdaterName, this.updateStateValue), _objectSpread2$1)));
            }
          }]);

          return WithState;
        }(react.Component);

        if (process.env.NODE_ENV !== 'production') {
          return setDisplayName(wrapDisplayName(BaseComponent, 'withState'))(WithState);
        }

        return WithState;
      };
    };

    exports.compose = compose;
    exports.defaultProps = defaultProps;
    exports.getDisplayName = getDisplayName;
    exports.pure = pure;
    exports.setDisplayName = setDisplayName;
    exports.setPropTypes = setPropTypes;
    exports.setStatic = setStatic;
    exports.shallowEqual = shallowEqual;
    exports.shouldUpdate = shouldUpdate;
    exports.withProps = withProps;
    exports.withPropsOnChange = withPropsOnChange;
    exports.withState = withState;
    exports.wrapDisplayName = wrapDisplayName;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nivo-recompose.umd.js.map
