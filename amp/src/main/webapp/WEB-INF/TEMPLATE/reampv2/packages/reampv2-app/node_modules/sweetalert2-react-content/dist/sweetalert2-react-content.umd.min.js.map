{"version":3,"file":"sweetalert2-react-content.umd.min.js","sources":["../src/mounts.js","../src/index.js"],"sourcesContent":["export const mounts = [\n  {\n    key: 'title',\n    getter: swal => swal.getTitle(),\n  },\n  {\n    key: 'html',\n    getter: swal => swal.getHtmlContainer(),\n  },\n  {\n    key: 'confirmButtonText',\n    getter: swal => swal.getConfirmButton(),\n  },\n  {\n    key: 'denyButtonText',\n    getter: swal => swal.getDenyButton(),\n  },\n  {\n    key: 'cancelButtonText',\n    getter: swal => swal.getCancelButton(),\n  },\n  {\n    key: 'footer',\n    getter: swal => swal.getFooter(),\n  },\n  {\n    key: 'closeButtonHtml',\n    getter: swal => swal.getCloseButton(),\n  },\n  {\n    key: 'iconHtml',\n    getter: swal => swal.getIcon().querySelector('.swal2-icon-content'),\n  },\n  {\n    key: 'loaderHtml',\n    getter: swal => swal.getLoader(),\n  },\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { mounts } from './mounts'\n\nconst noop = () => {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default function withReactContent (ParentSwal) {\n  /* Returns `params` separated into a tuple of `reactParams` (the React params that need to be rendered)\n  and`otherParams` (all the other parameters, with any React params replaced with a space ' ') */\n  function extractReactParams (params) {\n    const reactParams = {}\n    const otherParams = {}\n    const mountKeys = mounts.map(mount => mount.key)\n    Object.entries(params).forEach(([key, value]) => {\n      if (mountKeys.includes(key) && React.isValidElement(value)) {\n        reactParams[key] = value\n        otherParams[key] = ' '\n      } else {\n        otherParams[key] = value\n      }\n    })\n    return [reactParams, otherParams]\n  }\n  function render (swal, reactParams) {\n    Object.entries(reactParams).forEach(([key, value]) => {\n      const mount = mounts.find(mount => mount.key === key)\n      const domElement = mount.getter(ParentSwal)\n      ReactDOM.render(value, domElement)\n      swal.__mountedDomElements.push(domElement)\n    })\n  }\n\n  function unrender (swal) {\n    swal.__mountedDomElements.forEach(domElement => {\n      ReactDOM.unmountComponentAtNode(domElement)\n    })\n    swal.__mountedDomElements = []\n  }\n\n  return class extends ParentSwal {\n    static argsToParams (args) {\n      if (React.isValidElement(args[0]) || React.isValidElement(args[1])) {\n        const params = {}\n        ;['title', 'html', 'icon'].forEach((name, index) => {\n          if (args[index] !== undefined) {\n            params[name] = args[index]\n          }\n        })\n        return params\n      } else {\n        return ParentSwal.argsToParams(args)\n      }\n    }\n\n    _main (params, mixinParams) {\n      this.__mountedDomElements = []\n      this.__params = Object.assign({}, mixinParams, params)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      const superDidOpen = otherParams.didOpen || noop\n      const superDidDestroy = otherParams.didDestroy || noop\n      return super._main(\n        Object.assign({}, otherParams, {\n          didOpen: popup => {\n            render(this, reactParams)\n            superDidOpen(popup)\n          },\n          didDestroy: popup => {\n            superDidDestroy(popup)\n            unrender(this)\n          },\n        }),\n      )\n    }\n\n    update (params) {\n      Object.assign(this.__params, params)\n      unrender(this)\n      const [reactParams, otherParams] = extractReactParams(this.__params)\n      super.update(otherParams)\n      render(this, reactParams)\n    }\n  }\n}\n"],"names":["mounts","key","getter","swal","getTitle","getHtmlContainer","getConfirmButton","getDenyButton","getCancelButton","getFooter","getCloseButton","getIcon","querySelector","getLoader","noop","ParentSwal","extractReactParams","params","reactParams","otherParams","mountKeys","map","mount","Object","entries","forEach","value","includes","React","isValidElement","render","domElement","find","ReactDOM","__mountedDomElements","push","unrender","unmountComponentAtNode","args","name","index","undefined","argsToParams","_main","mixinParams","__params","assign","this","superDidOpen","didOpen","superDidDestroy","didDestroy","super","popup","update"],"mappings":";;;;;;kaAAO,MAAMA,EAAS,CACpB,CACEC,IAAK,QACLC,OAAQC,GAAQA,EAAKC,YAEvB,CACEH,IAAK,OACLC,OAAQC,GAAQA,EAAKE,oBAEvB,CACEJ,IAAK,oBACLC,OAAQC,GAAQA,EAAKG,oBAEvB,CACEL,IAAK,iBACLC,OAAQC,GAAQA,EAAKI,iBAEvB,CACEN,IAAK,mBACLC,OAAQC,GAAQA,EAAKK,mBAEvB,CACEP,IAAK,SACLC,OAAQC,GAAQA,EAAKM,aAEvB,CACER,IAAK,kBACLC,OAAQC,GAAQA,EAAKO,kBAEvB,CACET,IAAK,WACLC,OAAQC,GAAQA,EAAKQ,UAAUC,cAAc,wBAE/C,CACEX,IAAK,aACLC,OAAQC,GAAQA,EAAKU,cC/BnBC,EAAO,cAEE,SAA2BC,YAG/BC,EAAoBC,SACrBC,EAAc,GACdC,EAAc,GACdC,EAAYpB,EAAOqB,KAAIC,GAASA,EAAMrB,aAC5CsB,OAAOC,QAAQP,GAAQQ,SAAQ,EAAExB,EAAKyB,MAChCN,EAAUO,SAAS1B,IAAQ2B,UAAMC,eAAeH,IAClDR,EAAYjB,GAAOyB,EACnBP,EAAYlB,GAAO,KAEnBkB,EAAYlB,GAAOyB,KAGhB,CAACR,EAAaC,YAEdW,EAAQ3B,EAAMe,GACrBK,OAAOC,QAAQN,GAAaO,SAAQ,EAAExB,EAAKyB,YAEnCK,EADQ/B,EAAOgC,MAAKV,GAASA,EAAMrB,MAAQA,IACxBC,OAAOa,GAChCkB,UAASH,OAAOJ,EAAOK,GACvB5B,EAAK+B,qBAAqBC,KAAKJ,eAI1BK,EAAUjC,GACjBA,EAAK+B,qBAAqBT,SAAQM,IAChCE,UAASI,uBAAuBN,MAElC5B,EAAK+B,qBAAuB,UAGvB,cAAcnB,sBACEuB,MACfV,UAAMC,eAAeS,EAAK,KAAOV,UAAMC,eAAeS,EAAK,IAAK,OAC5DrB,EAAS,UACb,QAAS,OAAQ,QAAQQ,SAAQ,CAACc,EAAMC,UACpBC,IAAhBH,EAAKE,KACPvB,EAAOsB,GAAQD,EAAKE,OAGjBvB,SAEAF,EAAW2B,aAAaJ,GAInCK,MAAO1B,EAAQ2B,QACRV,qBAAuB,QACvBW,SAAWtB,OAAOuB,OAAO,GAAIF,EAAa3B,SACxCC,EAAaC,GAAeH,EAAmB+B,KAAKF,UACrDG,EAAe7B,EAAY8B,SAAWnC,EACtCoC,EAAkB/B,EAAYgC,YAAcrC,SAC3CsC,MAAMT,MACXpB,OAAOuB,OAAO,GAAI3B,EAAa,CAC7B8B,QAASI,IACPvB,EAAOiB,KAAM7B,GACb8B,EAAaK,IAEfF,WAAYE,IACVH,EAAgBG,GAChBjB,EAASW,UAMjBO,OAAQrC,GACNM,OAAOuB,OAAOC,KAAKF,SAAU5B,GAC7BmB,EAASW,YACF7B,EAAaC,GAAeH,EAAmB+B,KAAKF,gBACrDS,OAAOnC,GACbW,EAAOiB,KAAM7B"}