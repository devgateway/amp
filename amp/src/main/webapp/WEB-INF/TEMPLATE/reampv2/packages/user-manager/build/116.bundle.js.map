{"version":3,"file":"116.bundle.js","mappings":"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","sources":["utils/constants.ts","utils/errorHelper.ts","reducers/fetchUserProfileReducer.ts","utils/hooks.ts","webpack://user-manager/./src/components/css/Modal.module.css?15da","utils/validators.ts","reducers/editUserProfileReducer.ts","components/ResultModal.tsx","components/EditProfile.tsx","utils/loadTranslations.ts","reducers/translationsReducer.ts","components/Startup.tsx","pages/Home.tsx","components/NavigationManager.tsx","routing/routes.tsx","reducers/store.ts","App.tsx","routing/index.tsx","reportWebVitals.ts","bootstrap.tsx"],"sourcesContent":["export const REST_FETCH_USER = '/rest/usermanager/user/profile';\nexport const REST_EDIT_USER_PROFILE = '/rest/usermanager/update/user/profile';\n\nexport const enum RoutingStrategies {\n    // eslint-disable-next-line no-unused-vars\n    BROWSER = 'browser',\n    // eslint-disable-next-line no-unused-vars\n    MEMORY = 'memory'\n}\n\nexport const REAMPV2_APP_NAME = 'reampv2-app';\n","export const errorHelper = <T>(error: T | any[]) => {\n  if (error === null) {\n    return 'No error';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  const tempError = error as any;\n\n  if (tempError) {\n    const detectKeys = Object.keys(tempError.error)[0];\n    const extractedError = tempError.error[detectKeys][0];\n\n    if (!extractedError) {\n      return 'An error occurred.';\n    }\n\n    return extractedError;\n  }\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { UserProfile } from '../types';\nimport { REST_FETCH_USER } from '../utils/constants';\nimport { errorHelper } from '../utils/errorHelper';\n\nconst REDUCER_NAME = 'userProfile';\n\nexport type FetchUserProfileInitialStateType = {\n    user: UserProfile | null;\n    loading: boolean;\n    error: any;\n};\n\nconst initialState: FetchUserProfileInitialStateType = {\n  user: null,\n  loading: false,\n  error: null,\n};\n\nexport const fetchUserProfile = createAsyncThunk(\n  `${REDUCER_NAME}/fetchUserProfile`,\n  async (_, { rejectWithValue }) => {\n    const response = await fetch(REST_FETCH_USER);\n    const data: UserProfile | any = await response.json();\n\n    if (response.status !== 200) {\n      return rejectWithValue(data);\n    }\n\n    return data;\n  },\n);\n\nconst userProfileSlice = createSlice({\n  name: REDUCER_NAME,\n  initialState,\n  reducers: {\n    clearUser: (state) => {\n      state.user = null;\n    },\n    updateUser: (state, action: { payload: UserProfile, type: string }) => {\n      state.user = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUserProfile.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchUserProfile.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(fetchUserProfile.rejected, (state, action) => {\n      state.loading = false;\n      state.error = errorHelper(action.payload);\n    });\n  },\n});\n\nexport const { clearUser, updateUser } = userProfileSlice.actions;\nexport default userProfileSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect, useRef } from 'react';\nimport type { RootState, AppDispatch } from '../reducers/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n/**\n * @param func - Function to be executed after the first render\n * @param deps - Dependencies for the effect\n * @description - This hook is used to execute a function after the first render\n */\nexport const useDidMountEffect = (func: React.EffectCallback, deps?: React.DependencyList | undefined) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n    // eslint-disable-next-line\n  }, [...(deps || [])]);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"viewmodal_wrapper\":\"Modal_viewmodal_wrapper__VaiRH\",\"view_row\":\"Modal_view_row__REnuc\",\"input_field\":\"Modal_input_field__zNAhT\",\"input_field_checkbox\":\"Modal_input_field_checkbox__9mnQX\",\"modal_button\":\"Modal_modal_button__hHLPm\",\"modal_footer\":\"Modal_modal_footer__0EuqR\",\"modal_form_group\":\"Modal_modal_form_group__kYcRp\",\"input_label\":\"Modal_input_label__IBNfd\",\"modal_backdrop\":\"Modal_modal_backdrop__bJp7q\",\"view_one_item\":\"Modal_view_one_item__otZ9F\",\"view_item\":\"Modal_view_item__ti77R\",\"is_invalid\":\"Modal_is_invalid__TkgbJ\",\"text_is_invalid\":\"Modal_text_is_invalid__WIeip\",\"checkbox_wrapper\":\"Modal_checkbox_wrapper__+2atB\",\"checkbox_label\":\"Modal_checkbox_label__p7Z+S\",\"form_section\":\"Modal_form_section__LgI3a\",\"Modal_feedback_message\":\"Modal_Modal_feedback_message__X8fGw\"};","import * as Yup from 'yup';\n\nexport const editProfileSchema = Yup.object().shape({\n  firstName: Yup.string().required('⚠️   First name is required'),\n  lastName: Yup.string().required('⚠️   Last name is required'),\n  email: Yup.string().required('⚠️   Please enter a valid email').email('⚠️   Please enter a valid email'),\n  // @ts-ignore\n  emailConfirmation: Yup.string().required('⚠️   Please enter a valid email').oneOf([Yup.ref('email')], '⚠️   Emails do not match'),\n  notificationEmailEnabled: Yup.boolean(),\n  notificationEmail: Yup.string().email('⚠️   Please enter a valid email').when('notificationEmailEnabled', {\n    is: true,\n    then: (schema) => schema.required('⚠️ Please enter a valid email'),\n    otherwise: (schema) => schema.notRequired()\n  }),\n  repeatNotificationEmail: Yup.string().email('⚠️   Please enter a valid email').when('notificationEmailEnabled', {\n    is: true,\n    // @ts-ignore\n    then: (schema) => schema.oneOf([Yup.ref('notificationEmail')], '⚠️ Please enter a valid email'),\n    otherwise: (schema) => schema.notRequired()\n  })\n});\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { EditUserProfile, UserProfile } from '../types';\nimport { REST_EDIT_USER_PROFILE } from '../utils/constants';\nimport { errorHelper } from '../utils/errorHelper';\n\nconst REDUCER_NAME = 'editUserProfile';\n\nexport type EditUserProfileInitialStateType = {\n    user: EditUserProfile | null;\n    loading: boolean;\n    error: any;\n};\n\nconst initialState: EditUserProfileInitialStateType = {\n  user: null,\n  loading: false,\n  error: null,\n};\n\nexport const editUserProfile = createAsyncThunk(\n  `${REDUCER_NAME}/editUserProfile`,\n  async (user: EditUserProfile, { rejectWithValue }) => {\n    const response = await fetch(`${REST_EDIT_USER_PROFILE}/${user.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n    const data: UserProfile | any = await response.json();\n\n    if (response.status !== 200) {\n      toast.error('Error updating user profile');\n      return rejectWithValue(data);\n    }\n\n    toast.success('User profile updated');\n    return data;\n  },\n);\n\nconst editUserProfileSlice = createSlice({\n  name: REDUCER_NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(editUserProfile.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(editUserProfile.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    });\n    builder.addCase(editUserProfile.rejected, (state, action) => {\n      state.loading = false;\n      state.error = errorHelper(action.payload);\n    });\n  },\n});\n\nexport default editUserProfileSlice.reducer;\n","// @ts-nocheck\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\n\ninterface ResultModalProps {\n    content: string;\n    header?: any;\n    onClose?: () => void;\n    open: boolean;\n}\n\nconst ResultModal: React.FC<ResultModalProps> = (props) => {\n  const {\n    open, onClose, content, header\n  } = props;\n\n  return (\n      <Modal\n          header={header ?? 'Result'}\n          content={content}\n          open={open}\n          onClose={onClose}\n          size=\"tiny\"\n          dimmer=\"blurring\"\n          actions={[{ key: 'ok', content: 'OK', positive: true }]}\n      />\n  );\n};\nexport default ResultModal;\n","// @ts-nocheck\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n  Button, Checkbox, Form, Modal,\n} from 'semantic-ui-react';\nimport { Formik, FormikProps } from 'formik';\nimport styles from './css/Modal.module.css';\nimport { useAppDispatch, useAppSelector } from '../utils/hooks';\nimport { EditUserProfile, UserProfile } from '../types';\nimport { editProfileSchema } from '../utils/validators';\nimport { editUserProfile } from '../reducers/editUserProfileReducer';\nimport ResultModal from './ResultModal';\nimport { updateUser } from '../reducers/fetchUserProfileReducer';\n\nconst EditProfile = () => {\n  const dispatch = useAppDispatch();\n  // const navigate = useNavigate();\n  const translations = useAppSelector((state) => state.translations.translations);\n  const editUserProfileState = useAppSelector((state) => state.editUserProfile);\n\n  const modalRef = useRef(null);\n\n  const userProfile = useAppSelector((state) => state.userProfile.user);\n\n  const [show, setShow] = useState(true);\n  const [showResultModal, setShowResultModal] = useState(false);\n  const [resultModalContent, setResultModalContent] = useState('');\n\n  const getNotificationEmailEnabled = () => {\n    if (userProfile) {\n      return userProfile.notificationEmailEnabled;\n    }\n    return false;\n  };\n  const [useNotificationEmail, setUseNotificationEmail] = useState(getNotificationEmailEnabled());\n  const formikRef = useRef<FormikProps<EditUserProfile>>(null);\n\n  const handleResult = () => {\n    if (!editUserProfileState.loading && editUserProfileState.error) {\n      setResultModalContent('Error updating profile.');\n      setShowResultModal(true);\n    }\n\n    if (!editUserProfileState.loading && !editUserProfileState.error && editUserProfileState.user) {\n      const previousUser = userProfile as UserProfile;\n      dispatch(updateUser(editUserProfileState.user as UserProfile || previousUser));\n      setResultModalContent('Profile updated successfully.');\n      setShowResultModal(true);\n    }\n  };\n\n  useEffect(() => {\n    handleResult();\n  }, [editUserProfileState]);\n\n  console.log('userProfile', userProfile);\n  console.log('showState', show);\n\n  if (!userProfile) {\n    return <div />;\n  }\n\n  const handleClose = () => {\n    const previousURL = localStorage.getItem('PREVIOUS_URL');\n    setShow(false);\n    if (previousURL) {\n      window.location.replace(previousURL);\n    }\n  };\n\n  const handleCloseResultModal = () => {\n    setShowResultModal(false);\n    handleClose();\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const handleSetAltEmail = () => setUseNotificationEmail(!useNotificationEmail);\n\n  const handleSubmit = (values: EditUserProfile) => {\n    dispatch(editUserProfile(values));\n  };\n\n  const initialValues = {\n    firstName: userProfile.firstName,\n    lastName: userProfile.lastName,\n    email: userProfile.email,\n    emailConfirmation: userProfile.email,\n    notificationEmail: userProfile.notificationEmail,\n    repeatNotificationEmail: userProfile.notificationEmail,\n    notificationEmailEnabled: useNotificationEmail,\n    id: userProfile.id,\n    address: userProfile.address,\n    countryIso: userProfile.countryIso,\n    country: userProfile.country,\n    languageCode: userProfile.languageCode,\n    organizationId: userProfile.organizationId,\n    organizationName: userProfile.organizationName,\n    organizationTypeId: userProfile.organizationTypeId,\n    organizationGroupId: userProfile.organizationGroupId,\n  };\n\n  return (\n        <>\n            {userProfile\n                && (\n                    <div>\n                        {/* @ts-ignore */}\n                        <Modal\n                            onClose={() => handleClose()}\n                            onOpen={() => setShow(true)}\n                            open={show}\n                            ref={modalRef}\n                            closeIcon\n                            centered\n                            dimmer=\"blurring\"\n                        >\n                            <Modal.Header>\n                                Edit Profile\n                            </Modal.Header>\n                            <Formik\n                                validationSchema={editProfileSchema}\n                                initialValues={initialValues}\n                                innerRef={formikRef}\n                                onSubmit={(values) => handleSubmit(values)}\n                            >\n                                {(props) => (\n                                    <>\n                                      <Modal.Description>\n                                        <Form noValidate onSubmit={props.handleSubmit}>\n                                            <Modal.Content image>\n                                                    <div className={styles.form_section}>\n                                                        <Form.Group>\n                                                            <Form.Field className={styles.view_item} required>\n                                                                <label htmlFor=\"fistName\" className={styles.input_label}>\n                                                                    {translations['amp.user-manager:first-name']}\n                                                                </label>\n                                                                <input\n                                                                    type=\"text\"\n                                                                    placeholder={translations['amp.user-manager:enter-first-name']}\n                                                                    name=\"firstName\"\n                                                                    id=\"firstName\"\n                                                                    onChange={props.handleChange}\n                                                                    onBlur={props.handleBlur}\n                                                                    className={`${styles.input_field} ${(props.errors.firstName && props.touched.firstName) && styles.text_is_invalid}`}\n                                                                    defaultValue={props.values.firstName}\n                                                                />\n                                                              {\n                                                                props.errors.firstName && props.touched.firstName\n                                                                    && (\n                                                                        <h6>\n                                                                            {props.errors.firstName}\n                                                                        </h6>\n                                                                    )\n                                                              }\n                                                            </Form.Field>\n\n                                                            <Form.Field className={styles.view_item} required>\n                                                                <label htmlFor=\"lastName\" className={styles.input_label}>\n                                                                  {translations['amp.user-manager:last-name']}\n                                                                </label>\n                                                                <input\n                                                                    type=\"text\"\n                                                                    placeholder={translations['amp.user-manager:enter-last-name']}\n                                                                    name=\"lastName\"\n                                                                    onChange={props.handleChange}\n                                                                    onBlur={props.handleBlur}\n                                                                    className={`${styles.input_field} ${(props.errors.lastName && props.touched.lastName) && styles.text_is_invalid}`}\n                                                                    defaultValue={props.values.lastName}\n                                                                />\n\n                                                              {\n                                                                  props.errors.lastName && props.touched.lastName\n                                                                  && (\n                                                                      <h6>\n                                                                            {props.errors.lastName}\n                                                                        </h6>\n                                                                  )\n                                                              }\n                                                            </Form.Field>\n                                                        </Form.Group>\n\n                                                        <Form.Group>\n                                                            <Form.Field className={styles.view_item} required>\n                                                                <label htmlFor=\"email\" className={styles.input_label}>\n                                                                    {translations['amp.user-manager:email']}\n                                                                </label>\n                                                                <input\n                                                                    type=\"email\"\n                                                                    placeholder=\"john@doe.com\"\n                                                                    name=\"email\"\n                                                                    onChange={props.handleChange}\n                                                                    onBlur={props.handleBlur}\n                                                                    className={`${styles.input_field} ${(props.errors.email && props.touched.email) && styles.text_is_invalid}`}\n                                                                    defaultValue={props.values.email}\n                                                                />\n\n                                                              {\n                                                                  props.errors.email && props.touched.email\n                                                                  && (\n                                                                      <h6>\n                                                                            {props.errors.email}\n                                                                        </h6>\n                                                                  )\n                                                              }\n                                                            </Form.Field>\n\n                                                            <Form.Field className={styles.view_item} required>\n                                                                <label htmlFor=\"emailConfirmation\" className={styles.input_label}>\n                                                                  {translations['amp.user-manager:repeat-email']}\n                                                                </label>\n                                                                <input\n                                                                    type=\"email\"\n                                                                    placeholder=\"john@doe.com\"\n                                                                    name=\"emailConfirmation\"\n                                                                    onChange={props.handleChange}\n                                                                    onBlur={props.handleBlur}\n                                                                    className={`${styles.input_field} ${(props.errors.emailConfirmation && props.touched.emailConfirmation) && styles.text_is_invalid}`}\n                                                                    defaultValue={props.values.email}\n                                                                />\n\n                                                              {\n                                                                  props.errors.emailConfirmation && props.touched.emailConfirmation\n                                                                  && (\n                                                                      <h6>\n                                                                            {props.errors.emailConfirmation}\n                                                                        </h6>\n                                                                  )\n                                                              }\n                                                            </Form.Field>\n                                                        </Form.Group>\n                                                        <br />\n                                                        <br />\n                                                    </div>\n\n                                                    <div className={styles.form_section}>\n                                                        <Form.Group className={styles.checkbox_wrapper}>\n                                                            <Form.Field\n                                                                control={Checkbox}\n                                                                label={translations['amp.user-manager:receive-notifications']}\n                                                                defaultChecked={props.values.notificationEmailEnabled ?? false}\n                                                                name=\"notificationEmailEnabled\"\n                                                                id=\"notificationEmailEnabled\"\n                                                                onChange={props.handleChange}\n                                                                onBlur={props.handleBlur}\n                                                            />\n                                                        </Form.Group>\n\n                                                        {\n                                                            props.values.notificationEmailEnabled && (\n                                                                <Form.Group>\n                                                                    <Form.Field className={styles.view_item}>\n                                                                        <label htmlFor=\"notificationEmail\" className={styles.input_label}>\n                                                                          {translations['amp.user-manager:alternative-email']}\n                                                                        </label>\n                                                                        <input\n                                                                            type=\"email\"\n                                                                            placeholder=\"john@doe.com\"\n                                                                            name=\"notificationEmail\"\n                                                                            onChange={props.handleChange}\n                                                                            onBlur={props.handleBlur}\n                                                                            className={`${styles.input_field} ${(props.errors.notificationEmail && props.touched.notificationEmail) && styles.text_is_invalid}`}\n                                                                            defaultValue={props.values.notificationEmail}\n                                                                        />\n\n                                                                      {\n                                                                          props.errors.notificationEmail && props.touched.notificationEmail\n                                                                          && (\n                                                                              <h6>\n                                                                            {props.errors.notificationEmail}\n                                                                        </h6>\n                                                                          )\n                                                                      }\n                                                                    </Form.Field>\n\n                                                                    <Form.Field className={styles.view_item}>\n                                                                        <label className={styles.input_label}>\n                                                                          {translations['amp.user-manager:repeat-alternative-email']}\n                                                                        </label>\n                                                                        <input\n                                                                            type=\"email\"\n                                                                            placeholder=\"john@doe.com\"\n                                                                            name=\"repeatNotificationEmail\"\n                                                                            onChange={props.handleChange}\n                                                                            onBlur={props.handleBlur}\n                                                                            className={`${styles.input_field} ${(props.errors.repeatNotificationEmail && props.touched.repeatNotificationEmail) && styles.text_is_invalid}`}\n                                                                            defaultValue={props.values.notificationEmail}\n                                                                        />\n\n                                                                      {\n                                                                          props.errors.repeatNotificationEmail && props.touched.repeatNotificationEmail\n                                                                          && (\n                                                                              <h6>\n                                                                            {props.errors.repeatNotificationEmail}\n                                                                        </h6>\n                                                                          )\n                                                                      }\n\n                                                                    </Form.Field>\n                                                                </Form.Group>\n                                                            )\n                                                        }\n\n                                                    </div>\n                                            </Modal.Content>\n                                        </Form>\n                                      </Modal.Description>\n                                      {/* @ts-ignore */}\n                                      <Modal.Actions>\n                                          <Button\n                                              negative\n                                              onClick={handleClose}\n                                              className={styles.modal_button}\n                                          >\n                                            {translations['amp.user-manager:cancel']}\n                                          </Button>\n                                          <Button\n                                              type=\"submit\"\n                                              positive\n                                              className={styles.modal_button}\n                                              // @ts-ignore\n                                              onClick={props.handleSubmit}\n                                          >\n                                            {translations['amp.user-manager:save']}\n                                          </Button>\n                                      </Modal.Actions>\n\n                                      <ResultModal onClose={handleCloseResultModal} content={resultModalContent} open={showResultModal} />\n\n                                    </>\n                                )}\n\n                            </Formik>\n                        </Modal>\n\n                    </div>\n                )}\n        </>\n\n  );\n};\n\nexport default EditProfile;\n","const POST = 'POST';\nconst GET = 'GET';\nexport const WS_PREFIX = 'AMP_';\n\ninterface RequestParams<T, U> {\n    method: 'POST' | 'GET'| 'PUT' | 'DELETE' | 'PATCH';\n    body?: T\n    headers?: Record<string, U>;\n}\n\nfunction getRequestOptions(body : Record<string, any>, headers: Record<string, any> | null) {\n  const requestOptions: RequestParams<string, string> = {\n    method: body ? POST : GET,\n    headers: headers || { 'Content-Type': 'application/json', Accept: 'application/json', 'ws-prefix': WS_PREFIX }\n  };\n  if (body) {\n    requestOptions.body = JSON.stringify(body);\n  }\n  return requestOptions;\n}\n\nexport function loadTranslations(trnPack: any) {\n  return new Promise((resolve) => {\n    fetch('/rest/translations/label-translations', getRequestOptions(trnPack, null))\n      .then((response) => {\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.indexOf('application/json') !== -1) {\n          return response.json().then((data) => {\n            if (data.error) {\n              throw new Error(data.error);\n            }\n            return resolve(data);\n          });\n        }\n      });\n  });\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { loadTranslations } from '../utils/loadTranslations';\nimport initialTranslations from '../config/initialTranslations.json';\nimport { TranslationsPack } from '../types';\nimport { errorHelper } from '../utils/errorHelper';\n\ninterface TranslationsState {\n    translations: TranslationsPack;\n    loading: boolean;\n    error: any;\n}\n\nconst initialState: TranslationsState = {\n  translations: initialTranslations,\n  loading: false,\n  error: null,\n};\n\nexport const fetchTranslations = createAsyncThunk(\n  'translations/fetchTranslations',\n  async (trnPack:any, { rejectWithValue }) => {\n    const response = await loadTranslations(trnPack);\n\n    if (!response) {\n      return rejectWithValue(response);\n    }\n\n    return response;\n  }\n);\n\nconst translationsSlice = createSlice({\n  name: 'translations',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchTranslations.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchTranslations.fulfilled, (state, action) => {\n      state.loading = false;\n      state.translations = action.payload as TranslationsPack;\n    });\n    builder.addCase(fetchTranslations.rejected, (state, action) => {\n      state.loading = false;\n      state.error = errorHelper(action.payload);\n    });\n  }\n});\n\nexport default translationsSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchUserProfile } from '../reducers/fetchUserProfileReducer';\nimport { useAppDispatch, useAppSelector } from '../utils/hooks';\nimport EditProfile from './EditProfile';\nimport { fetchTranslations } from '../reducers/translationsReducer';\nimport defaultTranslationsPack from '../config/initialTranslations.json';\n\nexport const TranslationsContext = React.createContext(defaultTranslationsPack);\n\nconst Startup = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const userProfileLoading = useAppSelector((state) => state.userProfile.loading);\n  const translationsLoading = useAppSelector((state) => state.translations.loading);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-unused-vars\n    window.addEventListener('openUserModal', (_e) => {\n      // if (location.pathname === '/edit-profile') {\n      //   return;\n      // }\n\n      navigate('/edit-profile');\n    });\n  }, []);\n\n  useEffect(() => {\n    dispatch(fetchTranslations(defaultTranslationsPack));\n    dispatch(fetchUserProfile());\n  }, []);\n\n  return (\n      <>\n        {\n            userProfileLoading || translationsLoading\n              ? <div>Loading...</div>\n              : (\n                    <div className=\"App\">\n                      <EditProfile />\n                    </div>\n              )\n        }\n      </>\n\n  );\n};\n\nexport default Startup;\n","import React from 'react';\nimport './Home.css';\nimport Startup from '../components/Startup';\n\nfunction Home() {\n  return (\n   <Startup />\n  );\n}\nexport default Home;\n","// eslint-disable-next-line no-unused-vars\nimport React, { useEffect } from 'react';\nimport { matchRoutes, useLocation, useNavigate } from 'react-router-dom';\nimport { routes } from '../routing/routes';\n\nconst reampv2Basename = '/reampv2-app';\n\nconst NavigationManager = ({ children }: { children: any }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    function containerNavigationHandler(event: CustomEvent) {\n      let pathname: string = event.detail;\n\n      if (pathname.includes('user-manager')) {\n        pathname = pathname.replace('user-manager', '');\n      }\n\n      if (location.pathname === pathname || !matchRoutes(routes, { pathname })) {\n        return;\n      }\n      navigate(pathname);\n    }\n\n    // @ts-ignore\n    window.addEventListener('[container] navigated', containerNavigationHandler);\n\n    return () => {\n      // @ts-ignore\n      window.removeEventListener('[container] navigated', containerNavigationHandler);\n    };\n  }, [location]);\n\n  useEffect(() => {\n    const userManagerEvent = new CustomEvent('[UserManager] navigated', { detail: location.pathname });\n    window.dispatchEvent(userManagerEvent);\n  }, [location]);\n\n  useEffect(() => {\n    if (location.pathname.startsWith(reampv2Basename)) {\n      const containerEvent = new CustomEvent('[reampv2] navigated', {\n        detail: location.pathname.replace(reampv2Basename, ''),\n      });\n\n      window.dispatchEvent(containerEvent);\n    }\n  }, [location]);\n\n  return children;\n};\nexport default NavigationManager;\n","import React from 'react';\nimport { RouteObject, Outlet } from 'react-router-dom';\nimport Home from '../pages/Home';\nimport NavigationManager from '../components/NavigationManager';\n\nexport const routes: RouteObject[] = [\n  {\n    path: '/',\n    element: (\n      <NavigationManager>\n        <Outlet />\n      </NavigationManager>\n    ),\n    children: [\n      {\n        index: true,\n        element: (\n            <div>\n              <Home />\n            </div>\n\n        ),\n      },\n\n      {\n        path: 'edit-profile',\n        element: (\n            <Home />\n        ),\n      }\n    ],\n  },\n  {\n    // not found\n    path: '*',\n    element: (\n      <div />\n    ),\n  },\n];\n","import {\n  Action, combineReducers, configureStore, ThunkAction,\n} from '@reduxjs/toolkit';\nimport userProfileReducer from './fetchUserProfileReducer';\nimport editUserProfileReducer from './editUserProfileReducer';\nimport translationsReducer from './translationsReducer';\n\n// fetches the redux data from local storage\nconst loadState = () => {\n  const serialState = localStorage.getItem('state');\n  if (serialState === null || undefined) {\n    return undefined;\n  }\n  return JSON.parse(serialState);\n};\n\n// this is the persisted state from local storage\nconst persistedState = loadState();\n\nconst staticReducers = {\n  userProfile: userProfileReducer,\n  editUserProfile: editUserProfileReducer,\n  translations: translationsReducer\n};\n\nconst initialStore = {\n  ...persistedState,\n};\n\nexport const store = configureStore({\n  reducer: combineReducers(staticReducers),\n  preloadedState: initialStore,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;\n","import React from 'react';\nimport { RouterProvider } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { RoutingStrategies } from './utils/constants';\nimport { createRouter } from './routing';\nimport { store } from './reducers/store';\nimport './App.css';\n\ninterface AppProps {\n  routingStrategy: RoutingStrategies;\n  initialPathName: string;\n}\n\nconst App: React.FC<AppProps> = (props) => {\n  const { routingStrategy, initialPathName } = props;\n\n  const router = createRouter({ routingStrategy, initialPathName });\n\n  return (\n      <Provider store={store}>\n          <>\n              {/* @ts-ignore */}\n              <RouterProvider router={router} />\n          </>\n      </Provider>\n\n  );\n};\n\nexport default App;\n","import { createBrowserRouter, createMemoryRouter } from 'react-router-dom';\nimport { RoutingStrategies } from '../utils/constants';\nimport { routes } from './routes';\n\nexport const createRouter = ({ routingStrategy, initialPathName }:\n                                 { routingStrategy: RoutingStrategies, initialPathName: string }) => {\n  if (routingStrategy === RoutingStrategies.BROWSER) {\n    return createBrowserRouter(routes);\n  }\n\n  const initialEntries = [initialPathName];\n  return createMemoryRouter(routes, { initialEntries });\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RoutingStrategies } from './utils/constants';\nimport { MountOptions } from './types';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst boilerplate = require('@devgateway/amp-boilerplate/dist/amp-boilerplate');\n\nfunction Root({ routingStrategy, initialPathName }: { routingStrategy: RoutingStrategies, initialPathName: string }) {\n  return (\n    <React.StrictMode>\n      <App routingStrategy={routingStrategy} initialPathName={initialPathName} />\n    </React.StrictMode>\n  );\n}\n\nexport const mount = ({\n  mountPoint, routingStrategy, initialPathName = '/', standalone = true,\n} : MountOptions) => {\n  if (mountPoint) {\n    ReactDOM.createRoot(mountPoint).render(<Root routingStrategy={routingStrategy} initialPathName={initialPathName} />);\n  }\n\n  if (standalone) {\n    // @ts-ignore\n    // eslint-disable-next-line no-inner-declarations\n    function getParameterByName(name : string, url = window.location.href) {\n      name = name.replace(/[[\\]]/g, '\\\\$&');\n      const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`);\n      const results = regex.exec(url);\n      if (!results) return null;\n      if (!results[2]) return '';\n      return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n    }\n\n    if (!getParameterByName('embedded')) {\n      // @ts-ignore\n      // eslint-disable-next-line new-cap,no-new\n      new boilerplate.layout({});\n    }\n  }\n\n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals();\n};\n"],"names":["RoutingStrategies","errorHelper","error","tempError","detectKeys","Object","keys","extractedError","REDUCER_NAME","fetchUserProfile","createAsyncThunk","concat","async","_","_ref","rejectWithValue","response","fetch","data","json","status","userProfileSlice","createSlice","name","initialState","user","loading","reducers","clearUser","state","updateUser","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","editProfileSchema","Yup","shape","firstName","required","lastName","email","emailConfirmation","oneOf","notificationEmailEnabled","notificationEmail","when","is","then","schema","otherwise","notRequired","repeatNotificationEmail","editUserProfile","id","method","headers","body","JSON","stringify","toast","success","props","open","onClose","content","header","_jsx","Modal","size","dimmer","key","positive","EditProfile","dispatch","translations","editUserProfileState","modalRef","useRef","userProfile","show","setShow","useState","showResultModal","setShowResultModal","resultModalContent","setResultModalContent","useNotificationEmail","setUseNotificationEmail","formikRef","useEffect","handleResult","previousUser","console","log","handleClose","previousURL","localStorage","getItem","window","location","replace","handleCloseResultModal","initialValues","address","countryIso","country","languageCode","organizationId","organizationName","organizationTypeId","organizationGroupId","_Fragment","children","_jsxs","onOpen","ref","closeIcon","centered","Header","Formik","validationSchema","innerRef","onSubmit","values","handleSubmit","_props$values$notific","Description","Form","noValidate","Content","image","className","styles","Group","Field","htmlFor","type","placeholder","onChange","handleChange","onBlur","handleBlur","errors","touched","defaultValue","control","Checkbox","label","defaultChecked","Actions","Button","negative","onClick","ResultModal","POST","GET","WS_PREFIX","loadTranslations","trnPack","Promise","resolve","requestOptions","Accept","getRequestOptions","contentType","get","indexOf","Error","initialTranslations","fetchTranslations","Startup","navigate","useNavigate","userProfileLoading","translationsLoading","addEventListener","_e","defaultTranslationsPack","reampv2Basename","useLocation","containerNavigationHandler","event","pathname","detail","includes","matchRoutes","routes","removeEventListener","userManagerEvent","CustomEvent","dispatchEvent","startsWith","containerEvent","path","element","NavigationManager","Outlet","index","Home","staticReducers","userProfileReducer","editUserProfileReducer","translationsReducer","initialStore","loadState","serialState","parse","store","configureStore","reducer","combineReducers","preloadedState","routingStrategy","initialPathName","router","BROWSER","createBrowserRouter","initialEntries","createMemoryRouter","createRouter","Provider","RouterProvider","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","boilerplate","require","Root","React","App","mount","_ref2","mountPoint","standalone","ReactDOM","render","getParameterByName","url","arguments","length","undefined","href","results","RegExp","exec","decodeURIComponent","layout","reportWebVitals"],"sourceRoot":""}