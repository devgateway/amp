<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-178632</jira>
	<keyword>programs</keyword>
	<author>cdolghier</author>
	<description>make triggers and caches for programs</description>
	<apply>
		<script>
			<lang delimiter="@" type="postgres">
				
CREATE OR REPLACE FUNCTION getprogramdepth(programid bigint)
  RETURNS integer AS
$BODY$
 declare
         declare depth int;
         declare sid bigint;
         declare pid bigint;
 begin           
         depth := 0;
         select parent_theme_id into pid from amp_theme where amp_theme_id=programid;
         if pid is null then return depth; 
         end if;
         while pid is not null LOOP
                 depth := depth + 1;
                 sid := pid;
                 select parent_theme_id into pid from amp_theme where amp_theme_id=sid;
         end loop;
 return depth;
 END;
 $BODY$
  LANGUAGE plpgsql STABLE
  COST 100; @@@
  
CREATE OR REPLACE FUNCTION getprogramlevel(programid bigint, lvl integer)
  RETURNS bigint AS
$BODY$
 declare
         declare depth int;
         declare sid bigint;
         declare pid bigint;
 begin           
	depth := getprogramdepth(programid);
	pid := programid;
	if depth &lt; lvl then return null;
	end if;
	while depth &gt; lvl LOOP
		depth := depth - 1;
		sid := pid;
		select parent_theme_id into pid from amp_theme where amp_theme_id=sid;
	end loop;
 return pid;
 END;
 $BODY$
  LANGUAGE plpgsql STABLE; @@@
  
				<!-- cache each program's program_settings and level0-8 ancestors to be cached in a table  -->
				
				DROP VIEW IF EXISTS v_all_programs_with_levels@@@
				<!-- create view in place so that the following CREATE succeeds - AMP startup will overread it anyway -->
				CREATE OR REPLACE VIEW v_all_programs_with_levels AS
					SELECT th.amp_theme_id, th.parent_theme_id, th.name,
						getprogramlevel(th.amp_theme_id, 0) as id0, 
						getprogramlevel(th.amp_theme_id, 1) as id1, 
						getprogramlevel(th.amp_theme_id, 2) as id2, 
						getprogramlevel(th.amp_theme_id, 3) as id3, 
						getprogramlevel(th.amp_theme_id, 4) as id4, 
						getprogramlevel(th.amp_theme_id, 5) as id5, 
						getprogramlevel(th.amp_theme_id, 6) as id6, 
						getprogramlevel(th.amp_theme_id, 7) as id7, 
						getprogramlevel(th.amp_theme_id, 8) as id8,
						aps.amp_program_settings_id as program_setting_id, aps.name as program_setting_name
					FROM amp_theme th LEFT JOIN amp_program_settings aps ON aps.amp_program_settings_id = getprogramsettingid(th.amp_theme_id)@@@					 
				
				DROP TABLE IF EXISTS all_programs_with_levels@@@
				CREATE TABLE all_programs_with_levels AS SELECT * FROM v_all_programs_with_levels@@@
				CREATE INDEX apwl_theme_id ON all_programs_with_levels(amp_theme_id)@@@
				CREATE INDEX apwl_ps_id ON all_programs_with_levels(program_setting_id)@@@
				CREATE INDEX apwl_ps_name ON all_programs_with_levels(program_setting_name)@@@
				CREATE INDEX apwl_id0_idx ON all_programs_with_levels(id0)@@@
				CREATE INDEX apwl_id1_idx ON all_programs_with_levels(id1)@@@
				CREATE INDEX apwl_id2_idx ON all_programs_with_levels(id2)@@@
				CREATE INDEX apwl_id3_idx ON all_programs_with_levels(id3)@@@
				CREATE INDEX apwl_id4_idx ON all_programs_with_levels(id4)@@@
				CREATE INDEX apwl_id5_idx ON all_programs_with_levels(id5)@@@
				CREATE INDEX apwl_id6_idx ON all_programs_with_levels(id6)@@@
				CREATE INDEX apwl_id7_idx ON all_programs_with_levels(id7)@@@
				CREATE INDEX apwl_id8_idx ON all_programs_with_levels(id8)@@@
				
CREATE OR REPLACE FUNCTION update_program_level_caches_internal()
RETURNS bigint AS
$BODY$
BEGIN
	TRUNCATE all_programs_with_levels;

	INSERT INTO all_programs_with_levels 
		SELECT * FROM v_all_programs_with_levels;
	RETURN 1;
end;
$BODY$
LANGUAGE plpgsql VOLATILE; @@@				
				
				CREATE OR REPLACE FUNCTION update_program_level_caches()
  				RETURNS TRIGGER AS
				$BODY$
					declare	dummy bigint;
					BEGIN
						SELECT into dummy update_program_level_caches_internal() FROM (select 1) AS dual;
						RETURN NULL;
					end;
				$BODY$
				LANGUAGE plpgsql VOLATILE; @@@
		
				CREATE TRIGGER update_program_level_caches_trg_theme AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE ON amp_theme
    				EXECUTE PROCEDURE update_program_level_caches() @@@
    				
				CREATE TRIGGER update_program_level_caches_trg_settings AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE ON amp_program_settings
    				EXECUTE PROCEDURE update_program_level_caches() @@@
    				

				CREATE TEMPORARY TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY AS SELECT update_program_level_caches_internal() FROM (select 1) AS dual @@@
				DROP TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY @@@

				DROP VIEW IF EXISTS v_primaryprogram_all_level CASCADE@@@
				DROP VIEW IF EXISTS v_secondaryprogram_all_level CASCADE@@@
				DROP VIEW IF EXISTS v_tertiaryprogram_all_level CASCADE@@@
				DROP VIEW IF EXISTS v_nationalobjectives_all_level CASCADE@@@
				
				UPDATE amp_global_settings SET settingsvalue = 'true' WHERE settingsname='Recreate the views on the next server restart' @@@	
			</lang>
		</script>
	</apply>
</tns:patch>