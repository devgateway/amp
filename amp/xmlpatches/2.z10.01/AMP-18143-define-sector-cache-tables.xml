<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-18143</jira>
	<keyword>sectors</keyword>
	<author>cdolghier</author>
	<description>make triggers and caches for sectors</description>
	<apply>
		<script>
			<lang delimiter="@" type="postgres">
				
CREATE OR REPLACE FUNCTION getsectordepth(sectorid bigint)
  RETURNS integer AS
$BODY$
 declare
         declare depth int;
         declare sid bigint;
         declare pid bigint;
 begin           
         depth := 0;
         select parent_sector_id into pid from amp_sector where amp_sector_id=sectorId;
         if pid is null then return depth; 
         end if;
         while pid is not null LOOP
                 depth := depth + 1;
                 sid := pid;
                 select parent_sector_id into pid from amp_sector where amp_sector_id=sid;
         end loop;
 return depth;
 END;
 $BODY$
  LANGUAGE plpgsql STABLE
  COST 100; @@@
  
CREATE OR REPLACE FUNCTION getsectorlevel(sectorid bigint, lvl integer)
  RETURNS bigint AS
$BODY$
 declare
         declare depth int;
         declare sid bigint;
         declare pid bigint;
 begin           
	depth := getsectordepth(sectorid);
	pid := sectorid;
	if depth &lt; lvl then return null;
	end if;
	while depth &gt; lvl LOOP
		depth := depth - 1;
		sid := pid;
		select parent_sector_id into pid from amp_sector where amp_sector_id = sid;
	end loop;
 return pid;
 END;
 $BODY$
  LANGUAGE plpgsql STABLE; @@@
  
				<!-- cache each program's program_settings and level0-8 ancestors to be cached in a table  -->
				
				DROP VIEW IF EXISTS v_all_sectors_with_levels@@@
				<!-- create view in place so that the following CREATE succeeds - AMP startup will overread it anyway -->
				CREATE OR REPLACE VIEW v_all_sectors_with_levels AS
					SELECT s.amp_sector_id, s.parent_sector_id, cc.name AS sector_config_name, ss.amp_sec_scheme_id, ss.sec_scheme_code, ss.sec_scheme_name, s.sector_code, s.name,
						getsectorlevel(s.amp_sector_id, 0) as id0, 
						getsectorlevel(s.amp_sector_id, 1) as id1, 
						getsectorlevel(s.amp_sector_id, 2) as id2, 
						getsectorlevel(s.amp_sector_id, 3) as id3, 
						getsectorlevel(s.amp_sector_id, 4) as id4
					FROM
						amp_sector s
						LEFT JOIN amp_sector_scheme ss ON s.amp_sec_scheme_id = ss.amp_sec_scheme_id
						LEFT JOIN amp_classification_config cc ON cc.classification_id = ss.amp_sec_scheme_id@@@					 
				
				DROP TABLE IF EXISTS all_sectors_with_levels@@@
				CREATE TABLE all_sectors_with_levels AS SELECT * FROM v_all_sectors_with_levels@@@
				
				CREATE INDEX aswl_sector_id ON all_sectors_with_levels(amp_sector_id)@@@
				CREATE INDEX aswl_parent_sector_id ON all_sectors_with_levels(parent_sector_id)@@@
				CREATE INDEX aswl_sector_config_name ON all_sectors_with_levels(sector_config_name)@@@
				CREATE INDEX aswl_sec_scheme_id ON all_sectors_with_levels(amp_sec_scheme_id)@@@
				CREATE INDEX aswl_id0_idx ON all_sectors_with_levels(id0)@@@
				CREATE INDEX aswl_id1_idx ON all_sectors_with_levels(id1)@@@
				CREATE INDEX aswl_id2_idx ON all_sectors_with_levels(id2)@@@
				CREATE INDEX aswl_id3_idx ON all_sectors_with_levels(id3)@@@
				CREATE INDEX aswl_id4_idx ON all_sectors_with_levels(id4)@@@
				
CREATE OR REPLACE FUNCTION update_sector_level_caches_internal()
RETURNS bigint AS
$BODY$
BEGIN   <!-- WARNING THIS TRIGGER HAS BEEN ALTERED IN AMP-21453-define-sector-nicache-tables.xml in AMP 2.12 -->
	TRUNCATE all_sectors_with_levels;

	INSERT INTO all_sectors_with_levels 
		SELECT * FROM v_all_sectors_with_levels;
	RETURN 1;
end;
$BODY$
LANGUAGE plpgsql VOLATILE; @@@				
				
				CREATE OR REPLACE FUNCTION update_sector_level_caches()
  				RETURNS TRIGGER AS
				$BODY$
					declare	dummy bigint;
					BEGIN
						SELECT into dummy update_sector_level_caches_internal() FROM (select 1) AS dual;
						RETURN NULL;
					end;
				$BODY$
				LANGUAGE plpgsql VOLATILE; @@@
		
				CREATE TRIGGER update_sector_level_caches_trg_sector AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE ON amp_sector
    				EXECUTE PROCEDURE update_sector_level_caches() @@@
    				
				CREATE TRIGGER update_sector_level_caches_trg_scheme AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE ON amp_sector_scheme
    				EXECUTE PROCEDURE update_sector_level_caches() @@@
    				
				CREATE TRIGGER update_sector_level_caches_trg_cconfig AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE ON amp_classification_config
    				EXECUTE PROCEDURE update_sector_level_caches() @@@


				CREATE TEMPORARY TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY_1 AS SELECT update_program_level_caches_internal() FROM (select 1) AS dual @@@
				DROP TABLE DUMMY_TABLE_YOU_SHOULD_NOT_SEE_IT_WE_ARE_TRYING_TO_MAKE_XML_PATCHER_HAPPY_1 @@@
				
				UPDATE amp_global_settings SET settingsvalue = 'true' WHERE settingsname='Recreate the views on the next server restart' @@@	
			</lang>
		</script>
	</apply>
</tns:patch>
