<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-18727</jira>
	<keyword>Views</keyword>
	<author>cdolghier</author>
	<description>logging stuff for pledge reports ETL</description>
	<apply>
		<script>
			<lang delimiter="@" type="postgres">

CREATE OR REPLACE FUNCTION funddetail_modified_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (NEW.pledge_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', NEW.pledge_id);
        END IF;
        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE OR REPLACE FUNCTION funddetail_deleted_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (OLD.pledge_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', OLD.pledge_id);
        END IF;
        RETURN OLD;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE TRIGGER funddetail_modified_trig BEFORE INSERT OR UPDATE ON amp_funding_detail
    FOR EACH ROW EXECUTE PROCEDURE funddetail_modified_proc()@@@

CREATE TRIGGER funddetail_deleted_trig BEFORE DELETE ON amp_funding_detail
    FOR EACH ROW EXECUTE PROCEDURE funddetail_deleted_proc()@@@



CREATE OR REPLACE FUNCTION pledge_funding_modified_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (NEW.pledge_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', NEW.pledge_id);
        END IF;
        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE OR REPLACE FUNCTION pledge_funding_deleted_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (OLD.pledge_id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', OLD.pledge_id);
        END IF;
        RETURN OLD;
    END;
$BODY$ LANGUAGE plpgsql@@@


CREATE TRIGGER pledge_funding_modified_trig BEFORE INSERT OR UPDATE ON amp_funding_pledges_details
    FOR EACH ROW EXECUTE PROCEDURE pledge_funding_modified_proc()@@@

CREATE TRIGGER pledge_funding_deleted_trig BEFORE DELETE ON amp_funding_pledges_details
    FOR EACH ROW EXECUTE PROCEDURE pledge_funding_deleted_proc()@@@
    
    
    
CREATE OR REPLACE FUNCTION pledge_modified_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (NEW.id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', NEW.id);
        END IF;
        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE OR REPLACE FUNCTION pledge_deleted_proc() RETURNS trigger AS $BODY$
    BEGIN
    	IF (OLD.id IS NOT NULL) THEN
        	INSERT INTO amp_etl_changelog(entity_name, entity_id) VALUES ('pledge', OLD.id);
        END IF;
        RETURN OLD;
    END;
$BODY$ LANGUAGE plpgsql@@@

CREATE TRIGGER pledge_modified_trig BEFORE INSERT OR UPDATE ON amp_funding_pledges
    FOR EACH ROW EXECUTE PROCEDURE pledge_modified_proc()@@@

CREATE TRIGGER pledge_deleted_trig BEFORE DELETE ON amp_funding_pledges
    FOR EACH ROW EXECUTE PROCEDURE pledge_deleted_proc()@@@
        
			</lang>
		</script>
	</apply>
</tns:patch>
