<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-21962</jira>
	<keyword>Views updated</keyword>
	<author>apicca</author>
	<description>audit column views for references to amp_activity and change for amp_activity_version</description>
	<apply>
		<script>
			<lang delimiter=";" type="postgres">
<!-- 					
			CREATE OR REPLACE VIEW v_costing_donors AS SELECT eu.amp_activity_id, o.name, euc.donor_id FROM amp_activity_version a, amp_eu_activity eu, amp_eu_activity_contributions euc, amp_organisation o WHERE (((a.amp_activity_id = eu.amp_activity_id) AND (eu.id = euc.eu_activity_id)) AND (euc.donor_id = o.amp_org_id)) ORDER BY o.name;;;
			
			CREATE OR REPLACE VIEW v_creation_date AS SELECT a.amp_activity_id, a.date_created AS creation_date FROM amp_activity_version a ORDER BY a.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_cris_number AS SELECT a.amp_activity_id, a.cris_number FROM amp_activity_version a ORDER BY a.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_funding_classification_date AS SELECT f.amp_activity_id,f.funding_classification_date FROM (amp_funding f JOIN amp_activity_version a ON ((f.amp_activity_id = a.amp_activity_id))) ORDER BY f.amp_activity_id;
			
			CREATE OR REPLACE VIEW v_funding_end_date AS SELECT f.amp_activity_id, f.amp_funding_id, f.actual_completion_date FROM (amp_funding f JOIN amp_activity_version a ON ((f.amp_activity_id = a.amp_activity_id))) ORDER BY f.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_funding_org_id AS SELECT f.amp_activity_id, f.financing_id AS funding_org_id FROM (amp_funding f JOIN amp_activity_version a ON ((((f.amp_activity_id = a.amp_activity_id) AND (f.financing_id IS NOT NULL)) AND ((f.financing_id)::text != ''::text)))) ORDER BY f.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_funding_start_date AS SELECT f.amp_activity_id, f.amp_funding_id, f.actual_start_date FROM (amp_funding f JOIN amp_activity_version a ON ((f.amp_activity_id = a.amp_activity_id))) ORDER BY f.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_funding_status AS SELECT a.amp_activity_id, val.category_value AS funding_status_name, val.id AS funding_status_code FROM amp_activity_version a, amp_funding fund, amp_category_value val, amp_category_class c WHERE ((((fund.amp_activity_id = a.amp_activity_id) AND (val.id = fund.funding_status_category_va)) AND ((c.keyname)::text = 'funding_status'::text)) AND (c.id = val.amp_category_class_id)) GROUP BY a.amp_activity_id, val.id, val.category_value ORDER BY a.amp_activity_id, val.category_value;;;
			
			CREATE OR REPLACE VIEW v_gov_agreement_number AS SELECT a.amp_activity_id, a.gov_agreement_number FROM amp_activity_version a WHERE (btrim((a.gov_agreement_number)::text) != ''::text);;;
			
			CREATE OR REPLACE VIEW v_issues AS SELECT ai.amp_activity_id, ai.name, ai.amp_issue_id FROM amp_issues ai, amp_activity_version a WHERE (ai.amp_activity_id = a.amp_activity_id) ORDER BY ai.amp_activity_id;;;
			
			CREATE OR REPLACE VIEW v_line_ministries_observations AS 
 					SELECT li.amp_activity_id, li.name, li.amp_line_ministry_observation_id, li.observationdate
   					FROM amp_line_ministry_observation li, amp_activity_version a
  					WHERE li.amp_activity_id = a.amp_activity_id
  					ORDER BY li.amp_activity_id;
			
			CREATE OR REPLACE VIEW v_measures_taken AS SELECT ai.amp_activity_id, m.name, m.amp_measure_id FROM amp_activity_version a, amp_measure m, amp_issues ai WHERE ((ai.amp_activity_id = a.amp_activity_id) AND (ai.amp_issue_id = m.amp_issue_id)) ORDER BY ai.amp_activity_id;;;
			
					
				CREATE OR REPLACE VIEW v_project_code AS SELECT a.amp_activity_id, a.project_code FROM amp_activity_version a WHERE (btrim((a.project_code)::text) != ''::text);;;
				
				CREATE OR REPLACE VIEW v_project_implementation_mode AS 
					 SELECT a.amp_activity_id, 
					        CASE
					            WHEN acv.id IS NULL THEN ''::text
					            ELSE acv.category_value::text
					        END AS project_implementation_mode, 
					    acv.id AS project_implementation_mode_id
					   FROM amp_activities_categoryvalues aac
					   JOIN amp_category_value acv ON aac.amp_categoryvalue_id = acv.id
					   JOIN amp_category_class acc ON acc.id = acv.amp_category_class_id AND acc.keyname::text = 'project_implementation_mode'::text
					   RIGHT JOIN amp_activity_version a ON a.amp_activity_id = aac.amp_activity_id
					  ORDER BY a.amp_activity_id;
					  
				CREATE OR REPLACE VIEW v_proposed_project_life AS SELECT
				a.amp_activity_id, a.proposed_project_life FROM amp_activity_version a ORDER
				BY a.amp_activity_id;
				
				CREATE OR REPLACE VIEW v_terms_assist AS SELECT a.amp_activity_id, val.category_value AS terms_assist_name, val.id AS terms_assist_code FROM amp_activity_version a, amp_funding fund, amp_category_value val WHERE ((fund.amp_activity_id = a.amp_activity_id) AND (val.id = fund.type_of_assistance_category_va)) GROUP BY a.amp_activity_id, val.id, val.category_value ORDER BY a.amp_activity_id, val.category_value;;;
-->				
				
			</lang>
		</script>
	</apply>
</tns:patch>
