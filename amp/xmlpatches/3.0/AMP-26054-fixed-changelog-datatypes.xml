<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
           xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../../doc/xmlpatcher.xsd ">
    <jira>AMP-26054</jira>
    <author>ociubotaru</author>
    <description>Changed operation_time to use millisecond precision.</description>
    <apply>
        <script>
            <lang delimiter="@@@" type="postgres"><![CDATA[
                ALTER TABLE amp_offline_changelog
                  ALTER operation_time SET DATA TYPE TIMESTAMP(3) WITHOUT TIME ZONE; @@@

                -- hstore extension is used to access dynamically columns from a RECORD type object
                CREATE EXTENSION IF NOT EXISTS hstore; @@@

                -- this is a trigger that expects one or two arguments
                -- first argument is mandatory and is entity name
                -- second argument is optional and is name of the column containing the id, used only when row level change logs are needed
                CREATE OR REPLACE FUNCTION update_offline_changelog()
                  RETURNS TRIGGER AS
                $BODY$
                DECLARE
                  v_entity_name VARCHAR = TG_ARGV[0];
                  v_operation_name VARCHAR;
                  v_entity_id VARCHAR = NULL;
                  v_row RECORD;
                BEGIN

                  IF TG_OP='DELETE' THEN
                    v_row = OLD;
                  ELSE
                    v_row = NEW;
                  END IF;

                  IF TG_NARGS > 1 THEN
                    IF TG_OP='DELETE' THEN
                      v_operation_name = 'deleted';
                    ELSE
                      v_operation_name = 'updated';
                    END IF;
                    v_entity_id = hstore(v_row) -> TG_ARGV[1];
                  ELSE
                    v_operation_name = 'updated';
                  END IF;

                  IF v_entity_id IS NULL THEN
                    UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id IS NULL;
                  ELSE
                    UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id=v_entity_id;
                  END IF;
                  IF NOT FOUND THEN
                    INSERT INTO amp_offline_changelog(entity_name, entity_id, operation_name, operation_time) VALUES(v_entity_name, v_entity_id, v_operation_name, now());
                  END IF;

                  RETURN NULL;
                END;
                $BODY$
                LANGUAGE plpgsql VOLATILE; @@@

                DROP TRIGGER ws_update_offline_changelog_trg ON amp_application_settings; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_application_settings
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('workspace settings'); @@@

                DROP TRIGGER u_update_offline_changelog_trg ON dg_user; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON dg_user
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('user'); @@@

                DROP TRIGGER ss_update_offline_changelog_trg ON amp_sector_scheme; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_sector_scheme
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('sector scheme'); @@@

                DROP TRIGGER cc_update_offline_changelog_trg ON amp_classification_config; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_classification_config
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('classification config'); @@@

                DROP TRIGGER cc_update_offline_changelog_trg ON amp_category_class; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_category_class
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('category class'); @@@

                DROP TRIGGER cv_update_offline_changelog_trg ON amp_category_value; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_category_value
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('category value'); @@@

                DROP TRIGGER l_update_offline_changelog_trg ON amp_location; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_location
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('location'); @@@

                DROP TRIGGER s_update_offline_changelog_trg ON amp_sector; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_sector
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('sector'); @@@

                DROP TRIGGER t_update_offline_changelog_trg ON amp_theme; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_theme
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('theme'); @@@

                DROP TRIGGER o_update_offline_changelog_trg ON amp_organisation; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_organisation
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('organisation'); @@@

                DROP TRIGGER r_update_offline_changelog_trg ON amp_role; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_role
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('role'); @@@

                DROP TRIGGER c_update_offline_changelog_trg ON amp_currency; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_currency
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('currency'); @@@

                DROP TRIGGER ct_update_offline_changelog_trg ON amp_contact; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_contact
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('contact'); @@@

                DROP TRIGGER ps_update_offline_changelog_trg ON amp_program_settings; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_program_settings
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('activity program settings'); @@@

                DROP TRIGGER cvl_update_offline_changelog_trg ON amp_category_value_location; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_category_value_location
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('category value location'); @@@

                DROP TRIGGER gs_update_offline_changelog_trg ON amp_global_settings; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_global_settings
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('global settings'); @@@

                DROP TRIGGER t_update_offline_changelog_trg ON amp_team; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_team
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('workspaces'); @@@

                DROP TRIGGER tm_update_offline_changelog_trg ON amp_team_member; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_team_member
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('workspace member', 'amp_team_mem_id'); @@@

                DROP TRIGGER m_update_offline_changelog_trg ON dg_message; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON dg_message
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('translation', 'message_key'); @@@

            ]]></lang>
        </script>
    </apply>
</tns:patch>
