<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
           xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../../doc/xmlpatcher.xsd ">
    <jira>AMP-26766</jira>
    <author>ociubotaru</author>
    <description>Monitor changes to contacts.</description>
    <apply>
        <script>
            <lang delimiter="@@@" type="postgres"><![CDATA[

                -- this is a trigger has one mandatory argument and two optional arguments
                -- first argument is mandatory and is entity name
                -- second argument is optional and is name of the column containing the id, used only when row level change logs are needed
                -- third argument is optional and is operation name, used only when row level change logs are needed
                CREATE OR REPLACE FUNCTION update_offline_changelog()
                  RETURNS TRIGGER AS
                $BODY$
                DECLARE
                  v_entity_name VARCHAR = TG_ARGV[0];
                  v_operation_name VARCHAR;
                  v_entity_id VARCHAR = NULL;
                  v_row RECORD;
                BEGIN

                  IF TG_OP='DELETE' THEN
                    v_row = OLD;
                  ELSE
                    v_row = NEW;
                  END IF;

                  IF TG_NARGS > 1 THEN
                    IF TG_NARGS > 2 THEN
                      v_operation_name = TG_ARGV[2];
                    ELSIF TG_OP='DELETE' THEN
                      v_operation_name = 'deleted';
                    ELSE
                      v_operation_name = 'updated';
                    END IF;
                    v_entity_id = hstore(v_row) -> TG_ARGV[1];
                  ELSE
                    v_operation_name = 'updated';
                  END IF;

                  IF v_entity_id IS NULL THEN
                    UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id IS NULL;
                  ELSE
                    UPDATE amp_offline_changelog SET operation_time=now(), operation_name=v_operation_name WHERE entity_name=v_entity_name AND entity_id=v_entity_id;
                  END IF;
                  IF NOT FOUND THEN
                    INSERT INTO amp_offline_changelog(entity_name, entity_id, operation_name, operation_time) VALUES(v_entity_name, v_entity_id, v_operation_name, now());
                  END IF;

                  RETURN NULL;
                END;
                $BODY$
                LANGUAGE plpgsql VOLATILE; @@@

                DROP TRIGGER update_offline_changelog_trg ON amp_contact; @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_contact
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('contact', 'contact_id'); @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_contact_properties
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('contact', 'contact_id', 'updated'); @@@

                CREATE TRIGGER update_offline_changelog_trg
                AFTER INSERT OR UPDATE OR DELETE ON amp_org_contact
                FOR EACH ROW EXECUTE PROCEDURE update_offline_changelog('contact', 'contact_id', 'updated'); @@@

                DELETE FROM amp_offline_changelog
                WHERE entity_name = 'contact' AND entity_id IS NULL; @@@

            ]]></lang>
        </script>
    </apply>
</tns:patch>
