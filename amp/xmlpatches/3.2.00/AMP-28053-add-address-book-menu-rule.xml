<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-27034</jira>
	<keyword>menu saiku entry rule</keyword>
	<author>apicca</author>
	<description>Add menu entry rule for Saiku</description>
	<apply>
		<script>
			<lang delimiter=";" type="postgres">
				INSERT INTO amp_features_visibility (id,name,haslevel,parent)
				SELECT (SELECT Nextval('amp_modules_visibility_seq')),
				'Address Book',true, (SELECT id FROM   amp_modules_visibility
				WHERE  NAME = 'Tools')
				WHERE  NOT EXISTS (SELECT id FROM   amp_features_visibility
				WHERE  NAME = 'Address Book');

				INSERT INTO amp_visibility_rule (id,parent_id,rule_type)
				select (SELECT nextval('amp_visibility_rule_seq')), null, 1
				where not exists (
				select * from amp_menu_entry_view
				where menu_id = (
				SELECT id FROM amp_menu_entry
				WHERE name = 'Address Book' ) and rule_id is not null );

				UPDATE amp_menu_entry_view SET rule_id=(SELECT currval('amp_visibility_rule_seq'))
				WHERE menu_id= (SELECT id FROM amp_menu_entry WHERE name = 'Address Book')
				and not exists (
				select * from amp_menu_entry_view
				where menu_id = (
				SELECT id FROM amp_menu_entry
				WHERE name = 'Address Book' ) and rule_id is not null );

				INSERT INTO amp_visibility_rule_amp_features_visibility (rule_id , feature_id)
				select
				(SELECT currval('amp_visibility_rule_seq')),
				(SELECT id FROM amp_features_visibility WHERE name = 'Address Book'
				AND parent IN (SELECT id FROM amp_modules_visibility WHERE name = 'Tools'))
				where not exists (select 1 from amp_visibility_rule_amp_features_visibility where feature_id = (SELECT id FROM amp_features_visibility WHERE name = 'Address Book'
				AND parent IN (SELECT id FROM amp_modules_visibility WHERE name = 'Tools')));

				INSERT INTO amp_features_templates (template, feature)
				SELECT
				(SELECT cast(settingsvalue AS int) AS template FROM amp_global_settings WHERE settingsname = 'Visibility Template'),
				(SELECT id AS module FROM amp_features_visibility WHERE name = 'Address Book')
				WHERE NOT EXISTS (
				SELECT template FROM amp_features_templates
				WHERE template = (SELECT cast(settingsvalue AS int) AS template FROM amp_global_settings WHERE settingsname = 'Visibility Template')
				AND feature = (SELECT id FROM amp_features_visibility WHERE name = 'Address Book'));
			</lang>
		</script>
	</apply>
</tns:patch>